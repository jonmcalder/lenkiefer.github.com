library(ineq) #used for concentration indices
path<-C:\Users\Leonard\Documents\Data Viz\blog\pophousinghpa
path<-"C:/Users/Leonard/Documents/Data Viz/blog/geo/"
popDF<-read_excel(paste0(path,"county2010_hist_pops.xlsx"),sheet="c2010_hist_pops")
shareDF<-read_excel(paste0(path,"county2010_hist_pops.xlsx"),sheet="national_shares")
shareDF<-shareDF %>% gather(year.of,"share",5:27)
shareDF<-mutate(shareDF,year=substr(year.of,6,10))
shareDF<-data.table(shareDF)
shareDF<-rename(shareDF,fips=GEOID10 )
popDF<-popDF %>% gather(year.of,"pop",5:27)
popDF<-mutate(popDF,year=ifelse(substr(year.of,1,1)=="e",substr(year.of,5,9),substr(year.of,4,8)))
popDF<-data.table(popDF)
popDF<-rename(popDF,fips=GEOID10 )
dt<-data.table(popDF)
dt[,sum(pop),by=year]
states<-usa_composite()
smap<-fortify(states,region="fips_state")
smap.all<-smap
counties <- counties_composite()
#get data:
counties@data <- left_join(counties@data, popDF.i, by = "fips")
counties@data <- left_join(counties@data, shareDF.i, by = "fips")
cmap <- fortify(counties_composite(), region="fips")
cmap$state<-substr(cmap$id,1,2)
cmap$county<-substr(cmap$id,3,5)
cmap$fips<-paste0(cmap$state,cmap$county)
cmap.all<-cmap
mycaption<-"@lenkiefer Source: Schroeder, Jonathan P. (2016). Historical Population Estimates for 2010 U.S. States, Counties and Metro/Micro Areas, 1790-2010. Retrieved from the Data Repository for the University of Minnesota, http://doi.org/10.13020/D6XW2H."
mycaption <- paste0(strwrap(mycaption, 130), sep="", collapse="\n")
#total counts map:
ggplot() +
geom_map(data = cmap.all, map = cmap.all,
aes(x = long, y = lat, map_id = id),
color = "#2b2b2b", size = 0.05, fill = NA) +
geom_map(data = counties@data, map = cmap.all,
aes(fill =log(pop), map_id = fips),
color = NA) +
geom_map(data = smap.all, map = smap.all,
aes(x = long, y = lat, map_id = id),
color = "gray", size = .25, fill = NA) +
theme_map( base_size = 12) +
theme(plot.title=element_text( size = 16, margin=margin(b=10))) +
theme(plot.subtitle=element_text(size = 14, margin=margin(b=-20))) +
theme(plot.caption=element_text(size = 9, margin=margin(t=-15))) +
coord_proj(us_laea_proj) +   labs(title="",subtitle="" ) +
scale_fill_viridis(name = "Population", discrete=F,option="D",end=0.95,direction=-1)+
theme(legend.position = "none") +theme(plot.caption=element_text(hjust=0,vjust=1,margin=margin(t=10)))+
labs(x="Population in 2014 (log scale)",y="",
#subtitle="Each dot represents 1 county",
title="County Population Distribution",
caption="@lenkiefer Source: TBD")
y.list<-unique(popDF$year)
yy<-y.list[1]
yy<-"1900"
popDF.i<-subset(popDF,year==yy)
shareDF.i<-subset(shareDF,year==yy)
#shareDF.i<-shareDF.i[,c(fips,share)]
shareDF.i<-data.table(shareDF.i)[,list(fips,share)]
counties <- counties_composite()
#get data:
counties@data <- left_join(counties@data, popDF.i, by = "fips")
counties@data <- left_join(counties@data, shareDF.i, by = "fips")
shareDF
shareDF<-read_excel(paste0(path,"county2010_hist_pops.xlsx"),sheet="national_shares")
shareDF<-shareDF %>% gather(year.of,"share",5:27)
shareDF<-mutate(shareDF,year=substr(year.of,6,10))
shareDF<-data.table(shareDF)
shareDF<-rename(shareDF,fips=GEOID10 )
head(shareDF)
library(dplyr)
shareDF<-rename(shareDF,fips=GEOID10 )
names(shareDF)
rename(shareDF,fips=GEOID10)
rename(shareDF,fips=GEOID10)
shareDF<-read_excel(paste0(path,"county2010_hist_pops.xlsx"),sheet="national_shares")
shareDF<-shareDF %>% gather(year.of,"share",5:27)
shareDF<-mutate(shareDF,year=substr(year.of,6,10))
#shareDF<-data.table(shareDF)
shareDF<-rename(shareDF,fips=GEOID10 )
names(shareDF)
?rename
popDF<-popDF %>% gather(year.of,"pop",5:27)
popDF<-mutate(popDF,year=ifelse(substr(year.of,1,1)=="e",substr(year.of,5,9),substr(year.of,4,8)))
popDF<-data.table(popDF)
library(d3scatter)
devtools::install_github("jcheng5/d3scatter")
library(d3scatter)
devtools::install_github("jcheng5/d3scatter")
library(crosstalk)
sd <- SharedData$new(txhousing, ~year)
library(plotly)
library(tidyverse)
p <- ggplot(sd, aes(month, median)) +
geom_line(aes(group = year)) +
geom_smooth(data = txhousing, method = "gam") +
facet_wrap(~ city)
ggplotly(p, tooltip = "year") %>%
highlight(on = "plotly_click", defaultValues = 2015, color = "red")
p <- ggplot(sd, aes(month, median)) +
geom_line(aes(group = year)) +
geom_smooth(data = txhousing, method = "gam") +
facet_wrap(~ city)
ggplotly(p, tooltip = "year") %>%
highlight(on = "plotly_click", defaultValues = 2015, color = "red")
library(crosstalk)
sd <- SharedData$new(txhousing, ~year)
library(plotly)
library(tidyverse)
p <- ggplot(sd, aes(month, median)) +
geom_line(aes(group = year)) +
geom_smooth(data = txhousing, method = "gam") +
facet_wrap(~ city)
ggplotly(p, tooltip = "year") %>%
highlight(on = "plotly_click", defaultValues = 2015, color = "red")
devtools::install_github(“ropensci/plotly”)
devtools::install_github(“ropensci/plotly”)
devtools::install_github("ropensci/plotly")
install.packages("digest")
devtools::install_github("ropensci/plotly")
install.packages(c("bsplus", "colorspace", "data.table", "forcats", "ggrepel", "ggthemes", "haven", "htmlTable", "knitr", "plyr", "proto", "quantmod", "Rcpp", "sp", "tidyverse", "tweenr"))
install.packages(c("bsplus", "colorspace", "data.table", "forcats", "ggrepel", "ggthemes", "haven", "htmlTable", "knitr", "plyr", "proto", "quantmod", "Rcpp", "sp", "tidyverse", "tweenr"))
install.packages(c("bsplus", "colorspace", "data.table", "forcats", "ggrepel", "ggthemes", "haven", "htmlTable", "knitr", "plyr", "proto", "quantmod", "Rcpp", "sp", "tidyverse", "tweenr"))
install.packages(c("bsplus", "colorspace", "data.table", "forcats", "ggrepel", "ggthemes", "haven", "htmlTable", "knitr", "plyr", "proto", "quantmod", "Rcpp", "sp", "tidyverse", "tweenr"))
install.packages(c("bsplus", "colorspace", "data.table", "forcats", "ggrepel", "ggthemes", "haven", "htmlTable", "knitr", "plyr", "proto", "quantmod", "Rcpp", "sp", "tidyverse", "tweenr"))
install.packages(c("bsplus", "colorspace", "data.table", "forcats", "ggrepel", "ggthemes", "haven", "htmlTable", "knitr", "plyr", "proto", "quantmod", "Rcpp", "sp", "tidyverse", "tweenr"))
install.packages(c("bsplus", "colorspace", "data.table", "forcats", "ggrepel", "ggthemes", "haven", "htmlTable", "knitr", "plyr", "proto", "quantmod", "Rcpp", "sp", "tidyverse", "tweenr"))
install.packages(c("bsplus", "colorspace", "data.table", "forcats", "ggrepel", "ggthemes", "haven", "htmlTable", "knitr", "plyr", "proto", "quantmod", "Rcpp", "sp", "tidyverse", "tweenr"))
install.packages(c("bsplus", "colorspace", "data.table", "forcats", "ggrepel", "ggthemes", "haven", "htmlTable", "knitr", "plyr", "proto", "quantmod", "Rcpp", "sp", "tidyverse", "tweenr"))
install.packages(c("bsplus", "colorspace", "data.table", "forcats", "ggrepel", "ggthemes", "haven", "htmlTable", "knitr", "plyr", "proto", "quantmod", "Rcpp", "sp", "tidyverse", "tweenr"))
install.packages(c("bsplus", "colorspace", "data.table", "forcats", "ggrepel", "ggthemes", "haven", "htmlTable", "knitr", "plyr", "proto", "quantmod", "Rcpp", "sp", "tidyverse", "tweenr"))
install.packages(c("bsplus", "colorspace", "data.table", "forcats", "ggrepel", "ggthemes", "haven", "htmlTable", "knitr", "plyr", "proto", "quantmod", "Rcpp", "sp", "tidyverse", "tweenr"))
install.packages(c("bsplus", "colorspace", "data.table", "forcats", "ggrepel", "ggthemes", "haven", "htmlTable", "knitr", "plyr", "proto", "quantmod", "Rcpp", "sp", "tidyverse", "tweenr"))
install.packages("tidyverse")
library(tidyverse,quietly=T,warn.conflicts = F)
library(zoo,quietly=T,warn.conflicts = F) # used for rolling window operations
###############################################################################
#### Read in HPI data
###############################################################################
df<-read_excel("data/states.xls",
sheet = "State Indices",  # name of sheet
range="B6:BB513" )        # range where data lives
library(tidyverse,quietly=T,warn.conflicts = F)
library(zoo,quietly=T,warn.conflicts = F) # used for rolling window operations
library(readxl,quietly=T,warn.conflicts=F)
###############################################################################
#### Read in HPI data
###############################################################################
df<-read_excel("data/states.xls",
sheet = "State Indices",  # name of sheet
range="B6:BB513" )        # range where data lives
###############################################################################
#### Set up dates from January 1975 to March 2017
###############################################################################
df$date<-seq.Date(as.Date("1975-01-01"),as.Date("2017-03-01"),by="1 month")
df.state<-df %>% gather(geo,hpi,-date) %>% mutate(type="state")
KnitPost <- function(site.path='/pathToYourBlog/', overwriteAll=F, overwriteOne=NULL) {
if(!'package:knitr' %in% search()) library('knitr')
## Blog-specific directories.  This will depend on how you organize your blog.
site.path <- site.path # directory of jekyll blog (including trailing slash)
rmd.path <- paste0(site.path, "_Rmd") # directory where your Rmd-files reside (relative to base)
fig.dir <- "img/Rfig/" # directory to save figures
posts.path <- paste0(site.path, "_posts/") # directory for converted markdown files
cache.path <- paste0(site.path, "_cache/") # necessary for plots
render_jekyll(highlight = "pygments")
opts_knit$set(base.url = '/', base.dir = site.path)
opts_chunk$set(fig.path=fig.dir, fig.width=8.5, fig.height=5.25, dev='svg', cache=F,
warning=F, message=F, cache.path=cache.path, tidy=F)
setwd(rmd.path) # setwd to base
# some logic to help us avoid overwriting already existing md files
files.rmd <- data.frame(rmd = list.files(path = rmd.path,
full.names = T,
pattern = "\\.Rmd$",
ignore.case = T,
recursive = F), stringsAsFactors=F)
files.rmd$corresponding.md.file <- paste0(posts.path, "/", basename(gsub(pattern = "\\.Rmd$", replacement = ".md", x = files.rmd$rmd)))
files.rmd$corresponding.md.exists <- file.exists(files.rmd$corresponding.md.file)
## determining which posts to overwrite from parameters overwriteOne & overwriteAll
files.rmd$md.overwriteAll <- overwriteAll
if(is.null(overwriteOne)==F) files.rmd$md.overwriteAll[grep(overwriteOne, files.rmd[,'rmd'], ignore.case=T)] <- T
files.rmd$md.render <- F
for (i in 1:dim(files.rmd)[1]) {
if (files.rmd$corresponding.md.exists[i] == F) {
files.rmd$md.render[i] <- T
}
if ((files.rmd$corresponding.md.exists[i] == T) && (files.rmd$md.overwriteAll[i] == T)) {
files.rmd$md.render[i] <- T
}
}
# For each Rmd file, render markdown (contingent on the flags set above)
for (i in 1:dim(files.rmd)[1]) {
if (files.rmd$md.render[i] == T) {
out.file <- knit(as.character(files.rmd$rmd[i]),
output = as.character(files.rmd$corresponding.md.file[i]),
envir = parent.frame(),
quiet = T)
message(paste0("KnitPost(): ", basename(files.rmd$rmd[i])))
}
}
}
library("knitr")
#KnitPost(site.path="C:/Users/Leonard/Documents/webpage/live/lenkiefer.github.com/", overwriteAll=TRUE, overwriteOne=NULL)
#KnitPost(site.path="C:/Users/Leonard/Documents/webpage/live/lenkiefer.github.com/", overwriteAll=FALSE, overwriteOne=4)
#brocks::htmlwidgets_deps(a)
KnitPost(site.path="C:/Users/Leonard/Documents/webpage/live/lenkiefer.github.com/", overwriteAll=T, overwriteOne=NULL)
unique(filter(df.state,year(date)>1999)$date)
install.packages("tidyverse")
install.packages("tidyverse")
library(zoo,quietly=T,warn.conflicts = F)     # used for rolling window operations
library(readxl,quietly=T,warn.conflicts=F)
library(ggplot2,quietly=T,warn.conflicts=F)
library(tidyr,quietly=T,warn.conflicts=F)
library(dplyr,quietly=T,warn.conflicts=F)
library(lubridate,quietly=T,warn.conflicts=F)
library(viridis,quietly=T,warn.conflicts=F)   # for the colors
###############################################################################
#### Read in HPI data
###############################################################################
df<-read_excel("data/states.xls",
sheet = "State Indices",  # name of sheet
range="B6:BB513" )        # range where data lives
###############################################################################
#### Set up dates from January 1975 to March 2017
###############################################################################
df$date<-seq.Date(as.Date("1975-01-01"),as.Date("2017-03-01"),by="1 month")
df.state<-df %>% gather(geo,hpi,-date) %>% mutate(type="state")
###############################################################################
#### Transform data
#### Needs library zoo for the rolling window operations
###############################################################################
df.state<-
df.state %>% group_by(geo) %>%
mutate(hpa=hpi/shift(hpi,12)-1,
hpilag12=shift(hpi,12,fill=NA),
hpimax12=zoo::rollmax(hpi,13,align="right",fill=NA),
hpimin12=-zoo::rollmax(-hpi,13,align="right",fill=NA)) %>% ungroup()
library(zoo,quietly=T,warn.conflicts = F)      # used for rolling window operations
library(readxl,quietly=T,warn.conflicts=F)
library(ggplot2,quietly=T,warn.conflicts=F)
library(tidyr,quietly=T,warn.conflicts=F)
library(dplyr,quietly=T,warn.conflicts=F)
library(lubridate,quietly=T,warn.conflicts=F)
library(data.table,quietly=T,warn.conflicts=F) # for the shift function
library(viridis,quietly=T,warn.conflicts=F)    # for the colors
###############################################################################
#### Read in HPI data
###############################################################################
df<-read_excel("data/states.xls",
sheet = "State Indices",  # name of sheet
range="B6:BB513" )        # range where data lives
###############################################################################
#### Set up dates from January 1975 to March 2017
###############################################################################
df$date<-seq.Date(as.Date("1975-01-01"),as.Date("2017-03-01"),by="1 month")
df.state<-df %>% gather(geo,hpi,-date) %>% mutate(type="state")
?shift
###############################################################################
#### Transform data
#### Needs library zoo for the rolling window operations
###############################################################################
df.state<-
df.state %>% group_by(geo) %>%
mutate(hpa=hpi/shift(hpi,12)-1,
hpilag12=shift(hpi,12,fill=NA),
hpimax12=zoo::rollmax(hpi,13,align="right",fill=NA),
hpimin12=-zoo::rollmax(-hpi,13,align="right",fill=NA)) %>% ungroup()
# Get a list of dates
dlist<-unique(filter(df.state,year(date)>1999)$date)
###############################################################################
#### Plotting function
###############################################################################
myplot1 <- function (i) {
g<-
ggplot(data=filter(df.state,date==dlist[i] &
!(geo %in%
c("United States not seasonally adjusted",
"United States seasonally adjusted" ))),
aes(x=hpi, y=geo, label=paste(" ",geo,""),
color=hpa,hjust=ifelse(hpa>0,0,1)))+
geom_text()  +
geom_point()  +
scale_x_log10(limits=c(70,352), breaks=c(75,100,125,150,200,250,350))+
geom_segment(aes(xend=hpimin12,x=hpimax12,y=geo,yend=geo),alpha=0.7)+
theme_minimal()  +
theme(legend.position="bottom",
axis.text.y=element_blank(),
legend.key.width=unit(4,"line"),
panel.grid.major.y=element_blank(),
plot.caption=element_text(hjust=0),
plot.title=element_text(face="bold",size=18))+
scale_color_viridis(end=0.85,option="C",limits=c(-.4,.4),
name="12-month % change     \nin house price index     \n",
label=percent)+
labs(y="", x="House price index (log scale, Dec 2000 =100, NSA)",
title="State house price dynamics",
subtitle=as.character(dlist[i],format="%B, %Y"),
caption="@lenkiefer Source: Freddie Mac house price index, each dot a state, lines trailing 12-month min-max")
return(g)
}
N<-length(dlist)
myplot1(N)
library(zoo,quietly=T,warn.conflicts = F)      # used for rolling window operations
library(readxl,quietly=T,warn.conflicts=F)
library(ggplot2,quietly=T,warn.conflicts=F)
library(tidyr,quietly=T,warn.conflicts=F)
library(dplyr,quietly=T,warn.conflicts=F)
library(lubridate,quietly=T,warn.conflicts=F)
library(data.table,quietly=T,warn.conflicts=F) # for the shift function
library(viridis,quietly=T,warn.conflicts=F)    # for the colors
library(scales,quietly=T,warn.conflicts=F)    # for labels
###############################################################################
#### Read in HPI data
###############################################################################
df<-read_excel("data/states.xls",
sheet = "State Indices",  # name of sheet
range="B6:BB513" )        # range where data lives
###############################################################################
#### Set up dates from January 1975 to March 2017
###############################################################################
df$date<-seq.Date(as.Date("1975-01-01"),as.Date("2017-03-01"),by="1 month")
df.state<-df %>% gather(geo,hpi,-date) %>% mutate(type="state")
###############################################################################
#### Transform data
#### Needs library zoo for the rolling window operations
###############################################################################
df.state<-
df.state %>% group_by(geo) %>%
mutate(hpa=hpi/shift(hpi,12)-1,
hpilag12=shift(hpi,12,fill=NA),
hpimax12=zoo::rollmax(hpi,13,align="right",fill=NA),
hpimin12=-zoo::rollmax(-hpi,13,align="right",fill=NA)) %>% ungroup()
# Get a list of dates
dlist<-unique(filter(df.state,year(date)>1999)$date)
###############################################################################
#### Plotting function
###############################################################################
myplot1 <- function (i) {
g<-
ggplot(data=filter(df.state,date==dlist[i] &
!(geo %in%
c("United States not seasonally adjusted",
"United States seasonally adjusted" ))),
aes(x=hpi, y=geo, label=paste(" ",geo,""),
color=hpa,hjust=ifelse(hpa>0,0,1)))+
geom_text()  +
geom_point()  +
scale_x_log10(limits=c(70,352), breaks=c(75,100,125,150,200,250,350))+
geom_segment(aes(xend=hpimin12,x=hpimax12,y=geo,yend=geo),alpha=0.7)+
theme_minimal()  +
theme(legend.position="bottom",
axis.text.y=element_blank(),
legend.key.width=unit(4,"line"),
panel.grid.major.y=element_blank(),
plot.caption=element_text(hjust=0),
plot.title=element_text(face="bold",size=18))+
scale_color_viridis(end=0.85,option="C",limits=c(-.4,.4),
name="12-month % change     \nin house price index     \n",
label=percent)+
labs(y="", x="House price index (log scale, Dec 2000 =100, NSA)",
title="State house price dynamics",
subtitle=as.character(dlist[i],format="%B, %Y"),
caption="@lenkiefer Source: Freddie Mac house price index, each dot a state, lines trailing 12-month min-max")
return(g)
}
N<-length(dlist)
myplot1(N)
KnitPost <- function(site.path='/pathToYourBlog/', overwriteAll=F, overwriteOne=NULL) {
if(!'package:knitr' %in% search()) library('knitr')
## Blog-specific directories.  This will depend on how you organize your blog.
site.path <- site.path # directory of jekyll blog (including trailing slash)
rmd.path <- paste0(site.path, "_Rmd") # directory where your Rmd-files reside (relative to base)
fig.dir <- "img/Rfig/" # directory to save figures
posts.path <- paste0(site.path, "_posts/") # directory for converted markdown files
cache.path <- paste0(site.path, "_cache/") # necessary for plots
render_jekyll(highlight = "pygments")
opts_knit$set(base.url = '/', base.dir = site.path)
opts_chunk$set(fig.path=fig.dir, fig.width=8.5, fig.height=5.25, dev='svg', cache=F,
warning=F, message=F, cache.path=cache.path, tidy=F)
setwd(rmd.path) # setwd to base
# some logic to help us avoid overwriting already existing md files
files.rmd <- data.frame(rmd = list.files(path = rmd.path,
full.names = T,
pattern = "\\.Rmd$",
ignore.case = T,
recursive = F), stringsAsFactors=F)
files.rmd$corresponding.md.file <- paste0(posts.path, "/", basename(gsub(pattern = "\\.Rmd$", replacement = ".md", x = files.rmd$rmd)))
files.rmd$corresponding.md.exists <- file.exists(files.rmd$corresponding.md.file)
## determining which posts to overwrite from parameters overwriteOne & overwriteAll
files.rmd$md.overwriteAll <- overwriteAll
if(is.null(overwriteOne)==F) files.rmd$md.overwriteAll[grep(overwriteOne, files.rmd[,'rmd'], ignore.case=T)] <- T
files.rmd$md.render <- F
for (i in 1:dim(files.rmd)[1]) {
if (files.rmd$corresponding.md.exists[i] == F) {
files.rmd$md.render[i] <- T
}
if ((files.rmd$corresponding.md.exists[i] == T) && (files.rmd$md.overwriteAll[i] == T)) {
files.rmd$md.render[i] <- T
}
}
# For each Rmd file, render markdown (contingent on the flags set above)
for (i in 1:dim(files.rmd)[1]) {
if (files.rmd$md.render[i] == T) {
out.file <- knit(as.character(files.rmd$rmd[i]),
output = as.character(files.rmd$corresponding.md.file[i]),
envir = parent.frame(),
quiet = T)
message(paste0("KnitPost(): ", basename(files.rmd$rmd[i])))
}
}
}
library("knitr")
#KnitPost(site.path="C:/Users/Leonard/Documents/webpage/live/lenkiefer.github.com/", overwriteAll=TRUE, overwriteOne=NULL)
#KnitPost(site.path="C:/Users/Leonard/Documents/webpage/live/lenkiefer.github.com/", overwriteAll=FALSE, overwriteOne=4)
#brocks::htmlwidgets_deps(a)
KnitPost(site.path="C:/Users/Leonard/Documents/webpage/live/lenkiefer.github.com/", overwriteAll=T, overwriteOne=NULL)
KnitPost <- function(site.path='/pathToYourBlog/', overwriteAll=F, overwriteOne=NULL) {
if(!'package:knitr' %in% search()) library('knitr')
## Blog-specific directories.  This will depend on how you organize your blog.
site.path <- site.path # directory of jekyll blog (including trailing slash)
rmd.path <- paste0(site.path, "_Rmd") # directory where your Rmd-files reside (relative to base)
fig.dir <- "img/Rfig/" # directory to save figures
posts.path <- paste0(site.path, "_posts/") # directory for converted markdown files
cache.path <- paste0(site.path, "_cache/") # necessary for plots
render_jekyll(highlight = "pygments")
opts_knit$set(base.url = '/', base.dir = site.path)
opts_chunk$set(fig.path=fig.dir, fig.width=8.5, fig.height=5.25, dev='svg', cache=F,
warning=F, message=F, cache.path=cache.path, tidy=F)
setwd(rmd.path) # setwd to base
# some logic to help us avoid overwriting already existing md files
files.rmd <- data.frame(rmd = list.files(path = rmd.path,
full.names = T,
pattern = "\\.Rmd$",
ignore.case = T,
recursive = F), stringsAsFactors=F)
files.rmd$corresponding.md.file <- paste0(posts.path, "/", basename(gsub(pattern = "\\.Rmd$", replacement = ".md", x = files.rmd$rmd)))
files.rmd$corresponding.md.exists <- file.exists(files.rmd$corresponding.md.file)
## determining which posts to overwrite from parameters overwriteOne & overwriteAll
files.rmd$md.overwriteAll <- overwriteAll
if(is.null(overwriteOne)==F) files.rmd$md.overwriteAll[grep(overwriteOne, files.rmd[,'rmd'], ignore.case=T)] <- T
files.rmd$md.render <- F
for (i in 1:dim(files.rmd)[1]) {
if (files.rmd$corresponding.md.exists[i] == F) {
files.rmd$md.render[i] <- T
}
if ((files.rmd$corresponding.md.exists[i] == T) && (files.rmd$md.overwriteAll[i] == T)) {
files.rmd$md.render[i] <- T
}
}
# For each Rmd file, render markdown (contingent on the flags set above)
for (i in 1:dim(files.rmd)[1]) {
if (files.rmd$md.render[i] == T) {
out.file <- knit(as.character(files.rmd$rmd[i]),
output = as.character(files.rmd$corresponding.md.file[i]),
envir = parent.frame(),
quiet = T)
message(paste0("KnitPost(): ", basename(files.rmd$rmd[i])))
}
}
}
library("knitr")
#KnitPost(site.path="C:/Users/Leonard/Documents/webpage/live/lenkiefer.github.com/", overwriteAll=TRUE, overwriteOne=NULL)
#KnitPost(site.path="C:/Users/Leonard/Documents/webpage/live/lenkiefer.github.com/", overwriteAll=FALSE, overwriteOne=4)
#brocks::htmlwidgets_deps(a)
KnitPost(site.path="C:/Users/Leonard/Documents/webpage/live/lenkiefer.github.com/", overwriteAll=T, overwriteOne=NULL)
KnitPost <- function(site.path='/pathToYourBlog/', overwriteAll=F, overwriteOne=NULL) {
if(!'package:knitr' %in% search()) library('knitr')
## Blog-specific directories.  This will depend on how you organize your blog.
site.path <- site.path # directory of jekyll blog (including trailing slash)
rmd.path <- paste0(site.path, "_Rmd") # directory where your Rmd-files reside (relative to base)
fig.dir <- "img/Rfig/" # directory to save figures
posts.path <- paste0(site.path, "_posts/") # directory for converted markdown files
cache.path <- paste0(site.path, "_cache/") # necessary for plots
render_jekyll(highlight = "pygments")
opts_knit$set(base.url = '/', base.dir = site.path)
opts_chunk$set(fig.path=fig.dir, fig.width=8.5, fig.height=5.25, dev='svg', cache=F,
warning=F, message=F, cache.path=cache.path, tidy=F)
setwd(rmd.path) # setwd to base
# some logic to help us avoid overwriting already existing md files
files.rmd <- data.frame(rmd = list.files(path = rmd.path,
full.names = T,
pattern = "\\.Rmd$",
ignore.case = T,
recursive = F), stringsAsFactors=F)
files.rmd$corresponding.md.file <- paste0(posts.path, "/", basename(gsub(pattern = "\\.Rmd$", replacement = ".md", x = files.rmd$rmd)))
files.rmd$corresponding.md.exists <- file.exists(files.rmd$corresponding.md.file)
## determining which posts to overwrite from parameters overwriteOne & overwriteAll
files.rmd$md.overwriteAll <- overwriteAll
if(is.null(overwriteOne)==F) files.rmd$md.overwriteAll[grep(overwriteOne, files.rmd[,'rmd'], ignore.case=T)] <- T
files.rmd$md.render <- F
for (i in 1:dim(files.rmd)[1]) {
if (files.rmd$corresponding.md.exists[i] == F) {
files.rmd$md.render[i] <- T
}
if ((files.rmd$corresponding.md.exists[i] == T) && (files.rmd$md.overwriteAll[i] == T)) {
files.rmd$md.render[i] <- T
}
}
# For each Rmd file, render markdown (contingent on the flags set above)
for (i in 1:dim(files.rmd)[1]) {
if (files.rmd$md.render[i] == T) {
out.file <- knit(as.character(files.rmd$rmd[i]),
output = as.character(files.rmd$corresponding.md.file[i]),
envir = parent.frame(),
quiet = T)
message(paste0("KnitPost(): ", basename(files.rmd$rmd[i])))
}
}
}
library("knitr")
#KnitPost(site.path="C:/Users/Leonard/Documents/webpage/live/lenkiefer.github.com/", overwriteAll=TRUE, overwriteOne=NULL)
#KnitPost(site.path="C:/Users/Leonard/Documents/webpage/live/lenkiefer.github.com/", overwriteAll=FALSE, overwriteOne=4)
#brocks::htmlwidgets_deps(a)
KnitPost(site.path="C:/Users/Leonard/Documents/webpage/live/lenkiefer.github.com/", overwriteAll=T, overwriteOne=NULL)
