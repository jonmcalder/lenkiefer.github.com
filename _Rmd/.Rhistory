subtitle=as.character(max(tf[.frame==i,]$date),format="%b-%Y"),
y="House price growth (y/y %)",
x="Employment growth (y/y %)",
caption="@lenkiefer Source: Freddie Mac House Price Index, U.S. Bureau of Labor Statistics\nEach dot one state, lines divide (univariate) terciles")+
# limit the rang e
scale_x_continuous(limits=c(-0.11,0.11),
breaks=c(0,tf[.frame==i,quantile(emp.pc,c(0.333,0.667))]),
labels=c("0%",percent(round(tf[.frame==i,quantile(emp.pc,c(0.333,0.667))],3)))) +
scale_y_continuous(limits=c(-0.25,0.25),
breaks=c(0,tf[.frame==i,quantile(hpa,c(0.333,0.667))]),
labels=c("0%",percent(round(tf[.frame==i,quantile(hpa,c(0.333,0.667))],2))) )
dt[y==2 & x==2]
dt[y==2,]
dt<-merge(dm,emp.dt.state[,c("date","state","state_name","emp","emp.yoy","emp.pc"),],
by=c("date","state"))
# Compute annual percent change in house prices
dt=dt[,hpa:=(hpi-shift(hpi,12,fill=NA))/shift(hpi,12,fill=NA),by=c("state_name")]
# Construct color scheme:
dt<- dt[, ":="(hpa.t1=quantile(hpa,0.333,na.rm=T),
hpa.t2=quantile(hpa,0.667,na.rm=T),
emp.t1=quantile(emp.pc,0.333,na.rm=T),
emp.t2=quantile(emp.pc,0.667,na.rm=T))
,by="date"]
dt<-dt %>% mutate(y= ifelse(hpa<hpa.t1,1,ifelse(hpa<hpa.t2,2,3)),
x= ifelse(emp.pc<emp.t1,1,ifelse(emp.pc<emp.t2,2,3)))%>% data.table()
dt[,iso_3166_2:=state]  #rename state to match usa_composite
dt[, angle:=atan(y/x)]
dt[, myalpha:=x+y]
myf<-function(yy){
dt2<-dt[year(date)==yy & month(date)==12,]
dt2 %>% map_if(is.character, as.factor) %>% as.data.frame -> dt.out
return(dt.out)
}
# take top 20 metros
my.list<-lapply(c(2016,seq(2006,2016)),myf)
tf <- tween_states(my.list, tweenlength= 2, statelength=3, ease=rep('cubic-in-out',3),
nframes=1)
tf<-data.table(tf)
states<-usa_composite()
states@data <- left_join(states@data, tf[.frame==i], by = "iso_3166_2")
ggplot(data=tf[.frame==i,],aes(y=hpa,x=emp.pc,color=atan(y/x),alpha=x+y))+
geom_point(size=3)+  guides(alpha=F,color=F)+
geom_hline(yintercept=c(tf[.frame==i,quantile(hpa,c(0.333,0.667))]),color="gray20",linetype=2)+
geom_vline(xintercept=c(tf[.frame==i,quantile(emp.pc,c(0.333,0.667))]),color="gray20",linetype=2)+
geom_hline(yintercept=0,linetype=1,color="black")+
geom_vline(xintercept=0,linetype=1,color="black")+
scale_color_viridis(name="Color scale")+theme_minimal()+
theme(plot.caption=element_text(size = 9, hjust=0),
panel.grid=element_blank()) +
labs(title="Employment and house price growth by state",
subtitle=as.character(max(tf[.frame==i,]$date),format="%b-%Y"),
y="House price growth (y/y %)",
x="Employment growth (y/y %)",
caption="@lenkiefer Source: Freddie Mac House Price Index, U.S. Bureau of Labor Statistics\nEach dot one state, lines divide (univariate) terciles")+
# limit the rang e
scale_x_continuous(limits=c(-0.11,0.11),
breaks=c(0,tf[.frame==i,quantile(emp.pc,c(0.333,0.667))]),
labels=c("0%",percent(round(tf[.frame==i,quantile(emp.pc,c(0.333,0.667))],3)))) +
scale_y_continuous(limits=c(-0.25,0.25),
breaks=c(0,tf[.frame==i,quantile(hpa,c(0.333,0.667))]),
labels=c("0%",percent(round(tf[.frame==i,quantile(hpa,c(0.333,0.667))],2))) )
my.list<-lapply(c(2016,seq(2006,2016)),myf)
tf <- tween_states(my.list, tweenlength= 2, statelength=3, ease=rep('cubic-in-out',3),
nframes=150)
tf<-data.table(tf)
tf<-tf[.frame<5]
oopt = ani.options(interval = 0.15)
saveGIF({for (i in 1:max(tf$.frame)) {
states<-usa_composite()
states@data <- left_join(states@data, tf[.frame==i], by = "iso_3166_2")
gmap<-
ggplot() +
geom_map(data = smap, map = smap,
aes(x = long, y = lat, map_id = id),
color = "#2b2b2b", size = 0.05, fill = NA) +
geom_map(data =states@data,
map = smap,
aes(fill =atan(y/x),alpha=x+y, map_id =fips_state),
color = "gray50")  +
theme_map( base_size = 12) +
#facet_wrap(~date)  +
theme_map(base_size = 12) +
theme(plot.title=element_text(size = 16, face="bold",margin=margin(b=10))) +
theme(plot.subtitle=element_text(size = 14, margin=margin(b=0))) +
theme(plot.caption=element_text(size = 9, margin=margin(t=-15),hjust=0)) +
# scale_fill_gradient(low="red",high="blue")
scale_fill_viridis()+guides(alpha=F,fill=F)+
labs(#caption="@lenkiefer Source: U.S. Census Bureau",
subtitle=paste("December",year(tf[.frame==i,]$date)),
title="House prices and employment year-over-year growth")
g.scatter<-
ggplot(data=tf[.frame==i,],aes(y=hpa,x=emp.pc,color=atan(y/x),alpha=x+y))+
geom_point(size=3)+  guides(alpha=F,color=F)+
geom_hline(yintercept=c(tf[.frame==i,quantile(hpa,c(0.333,0.667))]),color="gray20",linetype=2)+
geom_vline(xintercept=c(tf[.frame==i,quantile(emp.pc,c(0.333,0.667))]),color="gray20",linetype=2)+
geom_hline(yintercept=0,linetype=1,color="black")+
geom_vline(xintercept=0,linetype=1,color="black")+
scale_color_viridis(name="Color scale")+theme_minimal()+
theme(plot.caption=element_text(size = 9, hjust=0),
panel.grid=element_blank()) +
labs(title="Employment and house price growth by state",
subtitle=as.character(max(tf[.frame==i,]$date),format="%b-%Y"),
y="House price growth (y/y %)",
x="Employment growth (y/y %)",
caption="@lenkiefer Source: Freddie Mac House Price Index, U.S. Bureau of Labor Statistics\nEach dot one state, lines divide (univariate) terciles")+
# limit the rang e
scale_x_continuous(limits=c(-0.11,0.11),
breaks=c(0,tf[.frame==i,quantile(emp.pc,c(0.333,0.667))]),
labels=c("0%",percent(round(tf[.frame==i,quantile(emp.pc,c(0.333,0.667))],3)))) +
scale_y_continuous(limits=c(-0.25,0.25),
breaks=c(0,tf[.frame==i,quantile(hpa,c(0.333,0.667))]),
labels=c("0%",percent(round(tf[.frame==i,quantile(hpa,c(0.333,0.667))],2))) )
g<-multiplot(gmap,g.legend,g.scatter,layout=matrix(c(1,2,3,3), nrow=2, byrow=TRUE))
print(g)
print(paste(i,"out of",max(tf$.frame)))
ani.pause()}
},movie.name="bivariate2.gif",ani.width = 650, ani.height = 600)
?opt
tf <- tween_states(my.list, tweenlength= 2, statelength=3, ease=rep('cubic-in-out',3),
nframes=150)
tf<-data.table(tf
)
tf
oopt = ani.options(interval = 0.15)
saveGIF({for (i in 1:max(tf$.frame)) {
states<-usa_composite()
states@data <- left_join(states@data, tf[.frame==i], by = "iso_3166_2")
gmap<-
ggplot() +
geom_map(data = smap, map = smap,
aes(x = long, y = lat, map_id = id),
color = "#2b2b2b", size = 0.05, fill = NA) +
geom_map(data =states@data,
map = smap,
aes(fill =atan(y/x),alpha=x+y, map_id =fips_state),
color = "gray50")  +
theme_map( base_size = 12) +
#facet_wrap(~date)  +
theme_map(base_size = 12) +
theme(plot.title=element_text(size = 16, face="bold",margin=margin(b=10))) +
theme(plot.subtitle=element_text(size = 14, margin=margin(b=0))) +
theme(plot.caption=element_text(size = 9, margin=margin(t=-15),hjust=0)) +
# scale_fill_gradient(low="red",high="blue")
scale_fill_viridis()+guides(alpha=F,fill=F)+
labs(#caption="@lenkiefer Source: U.S. Census Bureau",
subtitle=paste("December",year(tf[.frame==i,]$date)),
title="House prices and employment year-over-year growth")
g.scatter<-
ggplot(data=tf[.frame==i,],aes(y=hpa,x=emp.pc,color=atan(y/x),alpha=x+y))+
geom_point(size=3)+  guides(alpha=F,color=F)+
geom_hline(yintercept=c(tf[.frame==i,quantile(hpa,c(0.333,0.667))]),color="gray20",linetype=2)+
geom_vline(xintercept=c(tf[.frame==i,quantile(emp.pc,c(0.333,0.667))]),color="gray20",linetype=2)+
geom_hline(yintercept=0,linetype=1,color="black")+
geom_vline(xintercept=0,linetype=1,color="black")+
scale_color_viridis(name="Color scale")+theme_minimal()+
theme(plot.caption=element_text(size = 9, hjust=0),
panel.grid=element_blank()) +
labs(title="Employment and house price growth by state",
subtitle=as.character(max(tf[.frame==i,]$date),format="%b-%Y"),
y="House price growth (y/y %)",
x="Employment growth (y/y %)",
caption="@lenkiefer Source: Freddie Mac House Price Index, U.S. Bureau of Labor Statistics\nEach dot one state, lines divide (univariate) terciles")+
# limit the rang e
scale_x_continuous(limits=c(-0.11,0.11),
breaks=c(0,tf[.frame==i,quantile(emp.pc,c(0.333,0.667))]),
labels=c("0%",percent(round(tf[.frame==i,quantile(emp.pc,c(0.333,0.667))],3)))) +
scale_y_continuous(limits=c(-0.25,0.25),
breaks=c(0,tf[.frame==i,quantile(hpa,c(0.333,0.667))]),
labels=c("0%",percent(round(tf[.frame==i,quantile(hpa,c(0.333,0.667))],2))) )
g<-multiplot(gmap,g.legend,g.scatter,layout=matrix(c(1,2,3,3), nrow=2, byrow=TRUE))
print(g)
print(paste(i,"out of",max(tf$.frame)))
ani.pause()}
},movie.name="bivariate2.gif",ani.width = 650, ani.height = 600)
states<-usa_composite()
smap<-fortify(states,region="fips_state")
states@data <- left_join(states@data, dt, by = "iso_3166_2")
ggplot() +
geom_map(data = smap, map = smap,
aes(x = long, y = lat, map_id = id),
color = "#2b2b2b", size = 0.05, fill = NA) +
geom_map(data =filter(states@data,year(date)==2016 & month(date)==12),
map = smap,
aes(fill =atan(y/x),alpha=x+y, map_id =fips_state),
color = "gray50")  +
theme_map( base_size = 12) +
#facet_wrap(~date)  +
theme_map(base_size = 12) +
theme(plot.title=element_text(size = 16, face="bold",margin=margin(b=10))) +
theme(plot.subtitle=element_text(size = 14, margin=margin(b=0))) +
theme(plot.caption=element_text(size = 9, margin=margin(t=-15),hjust=0)) +
# scale_fill_gradient(low="red",high="blue")
scale_fill_viridis()+guides(alpha=F,fill=F)+
labs(caption="@lenkiefer Source: U.S. Census Bureau",
subtitle="December 2016",
title="House prices and employment year-over-year growth")
ggplot(data=dt[year(date)==2016 & month(date)==12,],
aes(y=hpa,x=emp.pc,color=atan(y/x),alpha=x+y))+
geom_point(size=3)+  guides(alpha=F,color=F)+
geom_hline(yintercept=c(dt[year(date)==2016 &
month(date)==12,
quantile(hpa,c(0.333,0.667))]),
color="gray20",linetype=2)+
geom_vline(xintercept=c(dt[year(date)==2016 &
month(date)==12,
quantile(emp.pc,c(0.333,0.667))]),
color="gray20",linetype=2)+
geom_hline(yintercept=0,linetype=1,color="black")+
geom_vline(xintercept=0,linetype=1,color="black")+
scale_color_viridis(name="Color scale")+theme_minimal()+
theme(plot.caption=element_text(size = 9, hjust=0),
panel.grid=element_blank()) +
labs(title="Employment and house price growth by state",
subtitle="December 2016",
y="House price growth (y/y %)",
x="Employment growth (y/y %)",
caption="@lenkiefer Source: Freddie Mac House Price Index, U.S. Bureau of Labor Statistics\nEach dot one state, lines divide (univariate) terciles")+
# limit the rang e
scale_x_continuous(limits=c(-0.11,0.11),
breaks=c(0,dt[year(date)==2016 &  month(date)==12,
quantile(emp.pc,c(0.333,0.667))]),
labels=c("0%",percent(round(dt[year(date)==2016 &
month(date)==12,                                                      quantile(emp.pc,c(0.333,0.667))],3)))) +
scale_y_continuous(limits=c(-0.25,0.25),
breaks=c(0,dt[year(date)==2016 &  month(date)==12,
quantile(hpa,c(0.333,0.667))]),
labels=c("0%",percent(round(dt[year(date)==2016 &
month(date)==12,                                                      quantile(hpa,c(0.333,0.667))],2))) )
KnitPost <- function(site.path='/pathToYourBlog/', overwriteAll=F, overwriteOne=NULL) {
if(!'package:knitr' %in% search()) library('knitr')
## Blog-specific directories.  This will depend on how you organize your blog.
site.path <- site.path # directory of jekyll blog (including trailing slash)
rmd.path <- paste0(site.path, "_Rmd") # directory where your Rmd-files reside (relative to base)
fig.dir <- "img/Rfig/" # directory to save figures
posts.path <- paste0(site.path, "_posts/") # directory for converted markdown files
cache.path <- paste0(site.path, "_cache/") # necessary for plots
render_jekyll(highlight = "pygments")
opts_knit$set(base.url = '/', base.dir = site.path)
opts_chunk$set(fig.path=fig.dir, fig.width=8.5, fig.height=5.25, dev='svg', cache=F,
warning=F, message=F, cache.path=cache.path, tidy=F)
setwd(rmd.path) # setwd to base
# some logic to help us avoid overwriting already existing md files
files.rmd <- data.frame(rmd = list.files(path = rmd.path,
full.names = T,
pattern = "\\.Rmd$",
ignore.case = T,
recursive = F), stringsAsFactors=F)
files.rmd$corresponding.md.file <- paste0(posts.path, "/", basename(gsub(pattern = "\\.Rmd$", replacement = ".md", x = files.rmd$rmd)))
files.rmd$corresponding.md.exists <- file.exists(files.rmd$corresponding.md.file)
## determining which posts to overwrite from parameters overwriteOne & overwriteAll
files.rmd$md.overwriteAll <- overwriteAll
if(is.null(overwriteOne)==F) files.rmd$md.overwriteAll[grep(overwriteOne, files.rmd[,'rmd'], ignore.case=T)] <- T
files.rmd$md.render <- F
for (i in 1:dim(files.rmd)[1]) {
if (files.rmd$corresponding.md.exists[i] == F) {
files.rmd$md.render[i] <- T
}
if ((files.rmd$corresponding.md.exists[i] == T) && (files.rmd$md.overwriteAll[i] == T)) {
files.rmd$md.render[i] <- T
}
}
# For each Rmd file, render markdown (contingent on the flags set above)
for (i in 1:dim(files.rmd)[1]) {
if (files.rmd$md.render[i] == T) {
out.file <- knit(as.character(files.rmd$rmd[i]),
output = as.character(files.rmd$corresponding.md.file[i]),
envir = parent.frame(),
quiet = T)
message(paste0("KnitPost(): ", basename(files.rmd$rmd[i])))
}
}
}
library("knitr")
#KnitPost(site.path="C:/Users/Leonard/Documents/webpage/live/lenkiefer.github.com/", overwriteAll=TRUE, overwriteOne=NULL)
#KnitPost(site.path="C:/Users/Leonard/Documents/webpage/live/lenkiefer.github.com/", overwriteAll=FALSE, overwriteOne=4)
#brocks::htmlwidgets_deps(a)
KnitPost(site.path="C:/Users/Leonard/Documents/webpage/live/lenkiefer.github.com/", overwriteAll=T, overwriteOne=NULL)
KnitPost <- function(site.path='/pathToYourBlog/', overwriteAll=F, overwriteOne=NULL) {
if(!'package:knitr' %in% search()) library('knitr')
## Blog-specific directories.  This will depend on how you organize your blog.
site.path <- site.path # directory of jekyll blog (including trailing slash)
rmd.path <- paste0(site.path, "_Rmd") # directory where your Rmd-files reside (relative to base)
fig.dir <- "img/Rfig/" # directory to save figures
posts.path <- paste0(site.path, "_posts/") # directory for converted markdown files
cache.path <- paste0(site.path, "_cache/") # necessary for plots
render_jekyll(highlight = "pygments")
opts_knit$set(base.url = '/', base.dir = site.path)
opts_chunk$set(fig.path=fig.dir, fig.width=8.5, fig.height=5.25, dev='svg', cache=F,
warning=F, message=F, cache.path=cache.path, tidy=F)
setwd(rmd.path) # setwd to base
# some logic to help us avoid overwriting already existing md files
files.rmd <- data.frame(rmd = list.files(path = rmd.path,
full.names = T,
pattern = "\\.Rmd$",
ignore.case = T,
recursive = F), stringsAsFactors=F)
files.rmd$corresponding.md.file <- paste0(posts.path, "/", basename(gsub(pattern = "\\.Rmd$", replacement = ".md", x = files.rmd$rmd)))
files.rmd$corresponding.md.exists <- file.exists(files.rmd$corresponding.md.file)
## determining which posts to overwrite from parameters overwriteOne & overwriteAll
files.rmd$md.overwriteAll <- overwriteAll
if(is.null(overwriteOne)==F) files.rmd$md.overwriteAll[grep(overwriteOne, files.rmd[,'rmd'], ignore.case=T)] <- T
files.rmd$md.render <- F
for (i in 1:dim(files.rmd)[1]) {
if (files.rmd$corresponding.md.exists[i] == F) {
files.rmd$md.render[i] <- T
}
if ((files.rmd$corresponding.md.exists[i] == T) && (files.rmd$md.overwriteAll[i] == T)) {
files.rmd$md.render[i] <- T
}
}
# For each Rmd file, render markdown (contingent on the flags set above)
for (i in 1:dim(files.rmd)[1]) {
if (files.rmd$md.render[i] == T) {
out.file <- knit(as.character(files.rmd$rmd[i]),
output = as.character(files.rmd$corresponding.md.file[i]),
envir = parent.frame(),
quiet = T)
message(paste0("KnitPost(): ", basename(files.rmd$rmd[i])))
}
}
}
library("knitr")
#KnitPost(site.path="C:/Users/Leonard/Documents/webpage/live/lenkiefer.github.com/", overwriteAll=TRUE, overwriteOne=NULL)
#KnitPost(site.path="C:/Users/Leonard/Documents/webpage/live/lenkiefer.github.com/", overwriteAll=FALSE, overwriteOne=4)
#brocks::htmlwidgets_deps(a)
KnitPost(site.path="C:/Users/Leonard/Documents/webpage/live/lenkiefer.github.com/", overwriteAll=T, overwriteOne=NULL)
KnitPost <- function(site.path='/pathToYourBlog/', overwriteAll=F, overwriteOne=NULL) {
if(!'package:knitr' %in% search()) library('knitr')
## Blog-specific directories.  This will depend on how you organize your blog.
site.path <- site.path # directory of jekyll blog (including trailing slash)
rmd.path <- paste0(site.path, "_Rmd") # directory where your Rmd-files reside (relative to base)
fig.dir <- "img/Rfig/" # directory to save figures
posts.path <- paste0(site.path, "_posts/") # directory for converted markdown files
cache.path <- paste0(site.path, "_cache/") # necessary for plots
render_jekyll(highlight = "pygments")
opts_knit$set(base.url = '/', base.dir = site.path)
opts_chunk$set(fig.path=fig.dir, fig.width=8.5, fig.height=5.25, dev='svg', cache=F,
warning=F, message=F, cache.path=cache.path, tidy=F)
setwd(rmd.path) # setwd to base
# some logic to help us avoid overwriting already existing md files
files.rmd <- data.frame(rmd = list.files(path = rmd.path,
full.names = T,
pattern = "\\.Rmd$",
ignore.case = T,
recursive = F), stringsAsFactors=F)
files.rmd$corresponding.md.file <- paste0(posts.path, "/", basename(gsub(pattern = "\\.Rmd$", replacement = ".md", x = files.rmd$rmd)))
files.rmd$corresponding.md.exists <- file.exists(files.rmd$corresponding.md.file)
## determining which posts to overwrite from parameters overwriteOne & overwriteAll
files.rmd$md.overwriteAll <- overwriteAll
if(is.null(overwriteOne)==F) files.rmd$md.overwriteAll[grep(overwriteOne, files.rmd[,'rmd'], ignore.case=T)] <- T
files.rmd$md.render <- F
for (i in 1:dim(files.rmd)[1]) {
if (files.rmd$corresponding.md.exists[i] == F) {
files.rmd$md.render[i] <- T
}
if ((files.rmd$corresponding.md.exists[i] == T) && (files.rmd$md.overwriteAll[i] == T)) {
files.rmd$md.render[i] <- T
}
}
# For each Rmd file, render markdown (contingent on the flags set above)
for (i in 1:dim(files.rmd)[1]) {
if (files.rmd$md.render[i] == T) {
out.file <- knit(as.character(files.rmd$rmd[i]),
output = as.character(files.rmd$corresponding.md.file[i]),
envir = parent.frame(),
quiet = T)
message(paste0("KnitPost(): ", basename(files.rmd$rmd[i])))
}
}
}
library("knitr")
#KnitPost(site.path="C:/Users/Leonard/Documents/webpage/live/lenkiefer.github.com/", overwriteAll=TRUE, overwriteOne=NULL)
#KnitPost(site.path="C:/Users/Leonard/Documents/webpage/live/lenkiefer.github.com/", overwriteAll=FALSE, overwriteOne=4)
#brocks::htmlwidgets_deps(a)
KnitPost(site.path="C:/Users/Leonard/Documents/webpage/live/lenkiefer.github.com/", overwriteAll=T, overwriteOne=NULL)
################################################################################
emp.data<-fread("https://download.bls.gov/pub/time.series/sm/sm.data.54.TotalNonFarm.All")
emp.series<-fread("https://download.bls.gov/pub/time.series/sm/sm.series")
emp.list<-emp.series[industry_code==0 # get all employment
& data_type_code==1 # get employment in thousands
& seasonal=="S",]  # get seasonally adjusted data]
emp.area<-fread("https://download.bls.gov/pub/time.series/sm/sm.area",
col.names=c("area_code","area_name","drop"))[,c("area_code","area_name"),with=F]
emp.st<-fread("https://download.bls.gov/pub/time.series/sm/sm.state",
col.names=c("state_code","state_name","drop"))[,c("state_code","state_name"),with=F]
# merge data
emp.dt<-merge(emp.data,emp.list,by="series_id",all.y=T)
#create month variable
emp.dt=emp.dt[,month:=as.numeric(substr(emp.dt$period,2,3))]
# (this assignment is to get around knitr/data table printing error)
# see e.g. http://stackoverflow.com/questions/15267018/knitr-gets-tricked-by-data-table-assignment
# M13 = Annual average, drop it:
emp.dt<-emp.dt[month<13,]
#create date variable
emp.dt$date<- as.Date(ISOdate(emp.dt$year,emp.dt$month,1) )
# merge on area and state codes
emp.dt<-merge(emp.dt,emp.area,by="area_code")
emp.dt<-merge(emp.dt,emp.st,by="state_code")
emp.dt=emp.dt[,c("state_name","area_name","date","year","month","value"),with=F]
emp.dt=emp.dt[,emp:=as.numeric(value)] #convert value to numeric
# Compute year-over-year change in employment and year-over-year percent change
emp.dt=emp.dt[,emp.yoy:=emp-shift(emp,12,fill=NA),by=c("area_name","state_name")]
# Percent change by year:
emp.dt=emp.dt[,emp.pc:=(emp-shift(emp,12,fill=NA))/shift(emp,12,fill=NA),by=c("area_name","state_name")]
emp.dt=emp.dt[,type:=ifelse(area_name=="Statewide","State","Metro")]
# drop states in c("Puerto Rico","Virgin Islands")
emp.dt=emp.dt[!(state_name %in% c("Puerto Rico","Virgin Islands")),]
# only keep state data
emp.dt.state<-emp.dt[area_name=="Statewide"]
names(emp.dt)
names(emp.dt.state)
head(emp.dt.state)
names(dm)
# Rename state_name as statename in emp.dt.state data
emp.dt.state<-rename(emp.dt.state,statename=state_name)
head(emp.dt.state)
head(dt)
head(dm)
?fips_state
state.fips()
?state.fips
data(state.fips)
state.fips
# Rename state_name as statename in emp.dt.state data
emp.dt.state<-rename(emp.dt.state,statename=state_name)
# get fips codes
stfips<-data(state.fips)
# merge polyname on statename to get abb, set abb = state
stfips<-rename(stfips,abb=state)
stfips<-rename(stfips,polyname=statenameL) # lower cased name
emp.dt.state$statenameL<-tolower(emp.dt.state$statename)
emp.dt.state<-left_joint(emp.dt.state,stfips[,c("abb,statenameL")],by="statenameL")
# get fips codes
stfips<-data(state.fips)
# merge polyname on statename to get abb, set abb = state
stfips<-dplyr::rename(stfips,abb=state)
stfips<-dplyr::rename(stfips,polyname=statenameL) # lower cased
str(stfips)
data(state.fips)
state.fips
# get fips codes
data(state.fips)
# merge polyname on statename to get abb, set abb = state
stfips<-dplyr::rename(state.fips,abb=state)
stfips<-dplyr::rename(stfips,polyname=statenameL) # lower cased name
state.fips
# get fips codes
data(state.fips)
# merge polyname on statename to get abb, set abb = state
stfips<-dplyr::rename(state.fips,state=abb)
stfips<-dplyr::rename(stfips,statenameL=polyname) # lower cased name
stfips
emp.dt.state$statenameL<-tolower(emp.dt.state$statename)
emp.dt.state<-left_join(emp.dt.state,stfips[,c("abb,statenameL")],by="statenameL")
emp.dt.state<-left_join(emp.dt.state,stfips[,c("state,statenameL")],by="statenameL")
names(stfips)
emp.dt.state<-left_join(emp.dt.state,stfips[,c("state","statenameL")],by="statenameL")
emp.dt.state
dt<-merge(dm,emp.dt.state[,c("date","state","state_name","emp","emp.yoy","emp.pc"),],
by=c("date","state"))
dt<-merge(dm,emp.dt.state[,c("date","state","statename","emp","emp.yoy","emp.pc"),],
by=c("date","state"))
dt
KnitPost <- function(site.path='/pathToYourBlog/', overwriteAll=F, overwriteOne=NULL) {
if(!'package:knitr' %in% search()) library('knitr')
## Blog-specific directories.  This will depend on how you organize your blog.
site.path <- site.path # directory of jekyll blog (including trailing slash)
rmd.path <- paste0(site.path, "_Rmd") # directory where your Rmd-files reside (relative to base)
fig.dir <- "img/Rfig/" # directory to save figures
posts.path <- paste0(site.path, "_posts/") # directory for converted markdown files
cache.path <- paste0(site.path, "_cache/") # necessary for plots
render_jekyll(highlight = "pygments")
opts_knit$set(base.url = '/', base.dir = site.path)
opts_chunk$set(fig.path=fig.dir, fig.width=8.5, fig.height=5.25, dev='svg', cache=F,
warning=F, message=F, cache.path=cache.path, tidy=F)
setwd(rmd.path) # setwd to base
# some logic to help us avoid overwriting already existing md files
files.rmd <- data.frame(rmd = list.files(path = rmd.path,
full.names = T,
pattern = "\\.Rmd$",
ignore.case = T,
recursive = F), stringsAsFactors=F)
files.rmd$corresponding.md.file <- paste0(posts.path, "/", basename(gsub(pattern = "\\.Rmd$", replacement = ".md", x = files.rmd$rmd)))
files.rmd$corresponding.md.exists <- file.exists(files.rmd$corresponding.md.file)
## determining which posts to overwrite from parameters overwriteOne & overwriteAll
files.rmd$md.overwriteAll <- overwriteAll
if(is.null(overwriteOne)==F) files.rmd$md.overwriteAll[grep(overwriteOne, files.rmd[,'rmd'], ignore.case=T)] <- T
files.rmd$md.render <- F
for (i in 1:dim(files.rmd)[1]) {
if (files.rmd$corresponding.md.exists[i] == F) {
files.rmd$md.render[i] <- T
}
if ((files.rmd$corresponding.md.exists[i] == T) && (files.rmd$md.overwriteAll[i] == T)) {
files.rmd$md.render[i] <- T
}
}
# For each Rmd file, render markdown (contingent on the flags set above)
for (i in 1:dim(files.rmd)[1]) {
if (files.rmd$md.render[i] == T) {
out.file <- knit(as.character(files.rmd$rmd[i]),
output = as.character(files.rmd$corresponding.md.file[i]),
envir = parent.frame(),
quiet = T)
message(paste0("KnitPost(): ", basename(files.rmd$rmd[i])))
}
}
}
library("knitr")
#KnitPost(site.path="C:/Users/Leonard/Documents/webpage/live/lenkiefer.github.com/", overwriteAll=TRUE, overwriteOne=NULL)
#KnitPost(site.path="C:/Users/Leonard/Documents/webpage/live/lenkiefer.github.com/", overwriteAll=FALSE, overwriteOne=4)
#brocks::htmlwidgets_deps(a)
KnitPost(site.path="C:/Users/Leonard/Documents/webpage/live/lenkiefer.github.com/", overwriteAll=T, overwriteOne=NULL)
