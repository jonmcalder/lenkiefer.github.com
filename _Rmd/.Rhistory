htmltools::strong('State house price trends, Jan 2000 to September 2016: '),
'year-over-year percent change in house prices',
htmltools::br(),
htmltools::em("Source: Freddie Mac House Price Index, use search boxes and arrows to filter/sort data." )),
colnames = c( "State"='state' ,
"Date"="date",
"Year"="year",
"Month"="month",
"House Price Index (Dec 2000=100)"="hpi.round",
"Annual percent change in house prices"="hpa100",
"Percent Above/Below Pre-2008 Peak"="hpa.peak",
"Percent Above post-2008 Trough"="hpa.trough"
),
filter = 'top',
class="display compact",
options = list(  pageLength = 50,height="100%",
columnDefs = list(  )))
)
bscols(widths=c(2,NA,NA),
list(
#filter_checkbox("state", "Highlight a particular state by checking", d3, ~state, inline = TRUE,multiple=F),
filter_select("state", "Select state to highlight for plot", sdt2, ~state,multiple=F)),
plot_ly(data=sdt2,y = ~state, x = ~hpa100,color=~hpa100,height="100%") %>%
add_markers(name="Selected state States" ),
datatable(sdt2, caption =  htmltools::tags$caption(
style = 'caption-side: top; text-align: left;',
htmltools::strong('State house price trends, Jan 2000 to September 2016: '),
'year-over-year percent change in house prices',
htmltools::br(),
htmltools::em("Source: Freddie Mac House Price Index, use search boxes and arrows to filter/sort data." )),
colnames = c( "State"='state' ,
"Date"="date",
"Year"="year",
"Month"="month",
"House Price Index (Dec 2000=100)"="hpi.round",
"Annual percent change in house prices"="hpa100",
"Percent Above/Below Pre-2008 Peak"="hpa.peak",
"Percent Above post-2008 Trough"="hpa.trough"
),
filter = 'top',
class="display compact",
options = list(  pageLength = 50,height="100%",width="80%",
columnDefs = list(  )))
)
bscols(widths=c(1,4,7),
list(
#filter_checkbox("state", "Highlight a particular state by checking", d3, ~state, inline = TRUE,multiple=F),
filter_select("state", "Select state to highlight for plot", sdt2, ~state,multiple=F)),
plot_ly(data=sdt2,y = ~state, x = ~hpa100,color=~hpa100,height="100%") %>%
add_markers(name="Selected state States" ),
datatable(sdt2, caption =  htmltools::tags$caption(
style = 'caption-side: top; text-align: left;',
htmltools::strong('State house price trends, Jan 2000 to September 2016: '),
'year-over-year percent change in house prices',
htmltools::br(),
htmltools::em("Source: Freddie Mac House Price Index, use search boxes and arrows to filter/sort data." )),
colnames = c( "State"='state' ,
"Date"="date",
"Year"="year",
"Month"="month",
"House Price Index (Dec 2000=100)"="hpi.round",
"Annual percent change in house prices"="hpa100",
"Percent Above/Below Pre-2008 Peak"="hpa.peak",
"Percent Above post-2008 Trough"="hpa.trough"
),
filter = 'top',
class="display compact",
options = list(  pageLength = 50,height="100%",width="80%",
columnDefs = list(  )))
)
bscols(widths=c(1,4,7),
list(
#filter_checkbox("state", "Highlight a particular state by checking", d3, ~state, inline = TRUE,multiple=F),
filter_select("state", "Select state to highlight for plot", sdt2, ~state,multiple=F)),
plot_ly(data=sdt2,y = ~state, x = ~hpa100,color=~hpa100,height="100%") %>%
add_markers(name="Selected state States" ),
datatable(sdt2, caption =  htmltools::tags$caption(
style = 'caption-side: top; text-align: left;',
htmltools::strong('State house price trends, Jan 2000 to September 2016: '),
'year-over-year percent change in house prices',
htmltools::br(),
htmltools::em("Source: Freddie Mac House Price Index, use search boxes and arrows to filter/sort data." )),
colnames = c( "State"='state' ,
"Date"="date",
"Year"="year",
"Month"="month",
"House Price Index (Dec 2000=100)"="hpi.round",
"Annual percent change in house prices"="hpa100",
"Percent Above/Below Pre-2008 Peak"="hpa.peak",
"Percent Above post-2008 Trough"="hpa.trough"
),
filter = 'top',
class="display compact",
options = list(  pageLength = 10,height="100%",width="80%",
columnDefs = list(  )))
)
sdt<-df[date>="2000-01-01",c(2,1,18,17),with=F]
sdt2 <- SharedData$new(sdt, ~state)
plot_ly(data=sdt2,y = ~hpa100, x = ~date,color=~hpa100,height="100%") %>%
add_lines(name="Selected state States",colors="black",alpha=0.7, hoverinfo = "text")
plot_ly(data=sdt2,y = ~hpa100, x = ~date,height="100%") %>%
add_lines(name="Selected state States",colors="black",alpha=0.7, hoverinfo = "text")
plot_ly(data=sdt2,y = ~hpa100, x = ~date,height=700,group_by=~state) %>%
add_lines(name="Selected state States",colors="black",alpha=0.7)
plot_ly(data=sdt2,y = ~hpa100, x = ~date,height=700,text=~state) %>%
add_lines(name="Selected state States",colors="black",alpha=0.7)
plot_ly(data=sdt2,y = ~hpa100, x = ~date,height=700,text=~state) %>%
add_lines(name="Selected state States",colors="black",alpha=0.7,hoverinfo="text") %>%
add_lines(name="All State",data=d3a,x=~date,y=~hpa12,
colors="black",color=~state,alpha=0.1,showlegend=F,hoverinfo="none")
plot_ly(data=d3,x = ~date, y = ~hpa12, text=~mytext2,height=750,width=1000) %>%
add_lines(name="Selected state States",colors="red",alpha=0.7, hoverinfo = "text") %>%
add_lines(name="All State",data=d3a,x=~date,y=~hpa12,
colors="black",color=~state,alpha=0.1,showlegend=F,hoverinfo="none")
plot_ly(data=d3,x = ~date, y = ~hpa12, text=~mytext2,height=750,width=1000) %>%
add_lines(name="Selected state States",colors="red",alpha=0.7, hoverinfo = "text")
plot_ly(data=d3,x = ~date, y = ~hpa12, height=750,width=1000) %>%
add_lines(name="Selected state States",colors="red",alpha=0.7, hoverinfo = "text")
plot_ly(data=sdt2,x = ~date, y = ~hpa12, height=750,width=1000) %>%
add_lines(name="Selected state States",colors="red",alpha=0.7, hoverinfo = "text")
plot_ly(data=sdt2,x = ~date, y = ~hpa100, height=750,width=1000) %>%
add_lines(name="Selected state States",colors="red",alpha=0.7, hoverinfo = "text")
str(sdt)
sdt<-df[date>="2000-01-01",c(2,1,18,17),with=F]
sdt<-group_by(sdt[year>1999,],state)
sdt<-df[date>="2000-01-01",c(2,1,18,17),with=F]
sdt<-group_by(sdt,state)
sdt2 <- SharedData$new(sdt, ~state)
bscols(widths=c(1,4,7),
list(
#filter_checkbox("state", "Highlight a particular state by checking", d3, ~state, inline = TRUE,multiple=F),
filter_select("state", "Select state to highlight for plot", sdt2, ~state,multiple=F)),
plot_ly(data=sdt2,x = ~date, y = ~hpa100, height=750,width=1000) %>%
add_lines(name="Selected state States",colors="red",alpha=0.7, hoverinfo = "text"),
datatable(sdt2, caption =  htmltools::tags$caption(
style = 'caption-side: top; text-align: left;',
htmltools::strong('State house price trends, Jan 2000 to September 2016: '),
'year-over-year percent change in house prices',
htmltools::br(),
htmltools::em("Source: Freddie Mac House Price Index, use search boxes and arrows to filter/sort data." )),
colnames = c( "State"='state' ,
"Date"="date",
"House Price Index (Dec 2000=100)"="hpi.round",
"Annual percent change in house prices"="hpa100"
),
filter = 'top',
class="display compact",
options = list(  pageLength = 10,height=700,width="80%",
columnDefs = list(  )))
)
bscols(widths=c(1,4,7),
list(
#filter_checkbox("state", "Highlight a particular state by checking", d3, ~state, inline = TRUE,multiple=F),
filter_select("state", "Select state to highlight for plot", sdt2, ~state,multiple=F)),
plot_ly(data=sdt2,x = ~date, y = ~hpa100, height=750) %>%
add_lines(name="Selected state States",colors="red",alpha=0.7, hoverinfo = "text"),
datatable(sdt2, caption =  htmltools::tags$caption(
style = 'caption-side: top; text-align: left;',
htmltools::strong('State house price trends, Jan 2000 to September 2016: '),
'year-over-year percent change in house prices',
htmltools::br(),
htmltools::em("Source: Freddie Mac House Price Index, use search boxes and arrows to filter/sort data." )),
colnames = c( "State"='state' ,
"Date"="date",
"House Price Index (Dec 2000=100)"="hpi.round",
"Annual percent change in house prices"="hpa100"
),
filter = 'top',
class="display compact",
options = list(  pageLength = 10,height=700,width="80%",
columnDefs = list(  )))
)
bscols(widths=c(1,4,7),
list(
#filter_checkbox("state", "Highlight a particular state by checking", d3, ~state, inline = TRUE,multiple=F),
filter_select("state", "Select state to highlight for plot", sdt2, ~state,multiple=F)),
plot_ly(data=sdt2,x = ~date, y = ~hpa100, height=500) %>%
add_lines(name="Selected state States",colors="red",alpha=0.7, hoverinfo = "text"),
datatable(sdt2, caption =  htmltools::tags$caption(
style = 'caption-side: top; text-align: left;',
htmltools::strong('State house price trends, Jan 2000 to September 2016: '),
'year-over-year percent change in house prices',
htmltools::br(),
htmltools::em("Source: Freddie Mac House Price Index, use search boxes and arrows to filter/sort data." )),
colnames = c( "State"='state' ,
"Date"="date",
"House Price Index (Dec 2000=100)"="hpi.round",
"Annual percent change in house prices"="hpa100"
),
filter = 'top',
class="display compact",
options = list(  pageLength = 10,height=500,width="80%",
columnDefs = list(  )))
)
bscols(widths=c(1,4,7),
list(
#filter_checkbox("state", "Highlight a particular state by checking", d3, ~state, inline = TRUE,multiple=F),
filter_select("state", "Select state to highlight for plot", sdt2, ~state,multiple=F)),
plot_ly(data=sdt2,x = ~date, y = ~hpa100, height=500) %>%
add_lines(name="Selected state States",colors="red",alpha=0.7, hoverinfo = "text"),
datatable(sdt2, caption =  htmltools::tags$caption(
style = 'caption-side: top; text-align: left;',
htmltools::strong('State house price trends, Jan 2000 to September 2016: '),
'year-over-year percent change in house prices',
htmltools::br(),
htmltools::em("Source: Freddie Mac House Price Index, use search boxes and arrows to filter/sort data." )),
colnames = c( "State"='state' ,
"Date"="date",
"House Price Index (Dec 2000=100)"="hpi.round",
"Annual percent change in house prices"="hpa100"
),
filter = 'top',
class="display compact",
options = list(  pageLength = 10,height=500,width=350,
columnDefs = list(  )))
)
bscols(widths=c(2,4,NA),
list(
#filter_checkbox("state", "Highlight a particular state by checking", d3, ~state, inline = TRUE,multiple=F),
filter_select("state", "Select state to highlight for plot", sdt2, ~state,multiple=F)),
plot_ly(data=sdt2,x = ~date, y = ~hpa100, height=500) %>%
add_lines(name="Selected state States",colors="red",alpha=0.7, hoverinfo = "text"),
datatable(sdt2, caption =  htmltools::tags$caption(
style = 'caption-side: top; text-align: left;',
htmltools::strong('State house price trends, Jan 2000 to September 2016: '),
'year-over-year percent change in house prices',
htmltools::br(),
htmltools::em("Source: Freddie Mac House Price Index, use search boxes and arrows to filter/sort data." )),
colnames = c( "State"='state' ,
"Date"="date",
"House Price Index (Dec 2000=100)"="hpi.round",
"Annual percent change in house prices"="hpa100"
),
filter = 'top',
class="display compact",
options = list(  pageLength = 10,height=500,width=350,
columnDefs = list(  )))
)
bscols(widths=c(2,4,NA),
list(
#filter_checkbox("state", "Highlight a particular state by checking", d3, ~state, inline = TRUE,multiple=F),
filter_select("state", "Select state to highlight for plot", sdt2, ~state,multiple=F)),
plot_ly(data=sdt2,x = ~date, y = ~hpa100, height=500) %>%
add_lines(name="Selected state States",colors="red",alpha=0.7, hoverinfo = "text"),
datatable(sdt2, caption =  htmltools::tags$caption(
style = 'caption-side: top; text-align: left;',
htmltools::strong('State house price trends, Jan 2000 to September 2016: '),
'year-over-year percent change in house prices',
htmltools::br(),
htmltools::em("Source: Freddie Mac House Price Index, use search boxes and arrows to filter/sort data." )),
colnames = c( "State"='state' ,
"Date"="date",
"House Price Index (Dec 2000=100)"="hpi.round",
"Annual percent change in house prices"="hpa100"
),
#filter = 'top',
class="display compact",
options = list(  pageLength = 10,height=500,width=350,
columnDefs = list(  )))
)
bscols(widths=c(2,4,4),
list(
#filter_checkbox("state", "Highlight a particular state by checking", d3, ~state, inline = TRUE,multiple=F),
filter_select("state", "Select state to highlight for plot", sdt2, ~state,multiple=F)),
plot_ly(data=sdt2,x = ~date, y = ~hpa100, height=500) %>%
add_lines(name="Selected state States",colors="red",alpha=0.7, hoverinfo = "text"),
datatable(sdt2, caption =  htmltools::tags$caption(
style = 'caption-side: top; text-align: left;',
htmltools::strong('State house price trends, Jan 2000 to September 2016: '),
'year-over-year percent change in house prices',
htmltools::br(),
htmltools::em("Source: Freddie Mac House Price Index, use search boxes and arrows to filter/sort data." )),
colnames = c( "State"='state' ,
"Date"="date",
"House Price Index (Dec 2000=100)"="hpi.round",
"Annual percent change in house prices"="hpa100"
),
#filter = 'top',
class="display compact",
options = list(  pageLength = 10,height=500,width=350,
columnDefs = list(  )))
)
bscols(widths=c(2,4,4),
list(
#filter_checkbox("state", "Highlight a particular state by checking", d3, ~state, inline = TRUE,multiple=F),
filter_select("state", "Select state to highlight for plot", sdt2, ~state,multiple=F)),
plot_ly(data=sdt2,x = ~date, y = ~hpa100, height=750) %>%
add_lines(name="Selected state States",colors="red",alpha=0.7, hoverinfo = "text"),
datatable(sdt2, caption =  htmltools::tags$caption(
style = 'caption-side: top; text-align: left;',
htmltools::strong('State house price trends, Jan 2000 to September 2016: '),
'year-over-year percent change in house prices',
htmltools::br(),
htmltools::em("Source: Freddie Mac House Price Index, use search boxes and arrows to filter/sort data." )),
colnames = c( "State"='state' ,
"Date"="date",
"House Price Index (Dec 2000=100)"="hpi.round",
"Annual percent change in house prices"="hpa100"
),
#filter = 'top',
class="display compact",
options = list(  pageLength = 10,
columnDefs = list(  )))
)
?datatable
bscols(widths=c(2,4,NA),
list(
#filter_checkbox("state", "Highlight a particular state by checking", d3, ~state, inline = TRUE,multiple=F),
filter_select("state", "Select state to highlight for plot", sdt2, ~state,multiple=T)),
plot_ly(data=sdt2,x = ~date, y = ~hpa100, height=750) %>%
add_lines(name="Selected state States",colors="red",alpha=0.7, hoverinfo = "text"),
datatable(sdt2, caption =  htmltools::tags$caption(
style = 'caption-side: top; text-align: left;',
htmltools::strong('State house price trends, Jan 2000 to September 2016: '),
'year-over-year percent change in house prices',
htmltools::br(),
htmltools::em("Source: Freddie Mac House Price Index, use search boxes and arrows to filter/sort data." )),
colnames = c( "State"='state' ,
"Date"="date",
"House Price Index (Dec 2000=100)"="hpi.round",
"Annual percent change in house prices"="hpa100"
),
#filter = 'top',
class="display compact",
options = list(  pageLength = 10)
))
bscols(widths=c(2,4,NA),
list(
#filter_checkbox("state", "Highlight a particular state by checking", d3, ~state, inline = TRUE,multiple=F),
filter_select("state", "Select state to highlight for plot", sdt2, ~state,multiple=T)),
plot_ly(data=sdt2,x = ~date, y = ~hpa100, height=750) %>%
add_lines(name="Selected state States",colors="red",alpha=0.7, hoverinfo = "text"),
datatable(sdt2,height="100%", caption =  htmltools::tags$caption(
style = 'caption-side: top; text-align: left;',
htmltools::strong('State house price trends, Jan 2000 to September 2016: '),
'year-over-year percent change in house prices',
htmltools::br(),
htmltools::em("Source: Freddie Mac House Price Index, use search boxes and arrows to filter/sort data." )),
colnames = c( "State"='state' ,
"Date"="date",
"House Price Index (Dec 2000=100)"="hpi.round",
"Annual percent change in house prices"="hpa100"
),
#filter = 'top',
class="display compact",
options = list(  pageLength = 10)
))
plot_ly(data=sdt2,x = ~date, y = ~hpa100, height=750) %>%
add_lines(name="Selected state States",colors="red",alpha=0.7)
plot_ly(data=sdt2,x = ~date, y = ~hpa100, height=750,text=~state) %>%
add_lines(name="Selected state States",color="red",alpha=0.7)
?add_lines
plot_ly(data=sdt2,x = ~date, y = ~hpa100, height=750,text=~state) %>%
add_lines(name="Selected state States",colors=I("red"),alpha=0.7)
plot_ly(data=sdt2,x = ~date, y = ~hpa100, height=750,text=~state) %>%
add_lines(name="Selected state States",colors=I("red"),alpha=0.7) %>%
layout(xaxis = list(title="Date"), yaxis = list(title="Annual % Change in House Prices"))
plot_ly(data=sdt2,x = ~date, y = ~hpa100, height=750,text=~state) %>%
add_lines(name="Selected state States",colors=I("red"),alpha=0.7) %>%
layout(title = "Annual Percent Change in House Prices\n@lenkiefer",xaxis = list(title="Date"), yaxis = list(title="Annual % Change in House Prices"))
virdis(52)
viridis(52)
plot_ly(data=sdt2,x = ~date, y = ~hpa100, height=750,text=~state) %>%
add_lines(name="Selected state States",colors=I("red"),alpha=0.7,colors=viridis(52)) %>%
layout(title = "Annual Percent Change in House Prices",xaxis = list(title="Date"), yaxis = list(title="Annual % Change in House Prices"))
plot_ly(data=sdt2,x = ~date, y = ~hpa100, height=750,text=~state) %>%
add_lines(name="Selected state States",colors=I("red"),alpha=0.7,color=viridis(52)) %>%
layout(title = "Annual Percent Change in House Prices",xaxis = list(title="Date"), yaxis = list(title="Annual % Change in House Prices"))
plot_ly(data=sdt2,x = ~date, y = ~hpa100, height=750,text=~state) %>%
add_lines(name="Selected state States",colors=I("red"),alpha=0.7,color=~state,colors=viridis(52)) %>%
layout(title = "Annual Percent Change in House Prices",xaxis = list(title="Date"), yaxis = list(title="Annual % Change in House Prices"))
unique(sdt$state)
library(flexdashboard)
library(tidyverse,quietly=T)
library(data.table,quietly=T)
library(htmltools)
library(htmlTable,quietly=T)
library(viridis,quietly=T)
library(DT,quietly=T)
library(plotly,quietly=T)
library(scales,quietly=T)
library(readxl)
library(crosstalk)
library(bsplus)
pal <- viridis(53)
pal <- setNames(pal, unique(sdt$state))
plot_ly(data=sdt2,x = ~date, y = ~hpa100, height=750,text=~state) %>%
add_lines(name="Selected state States",colors=I("red"),alpha=0.7,color=~state,colors=pal) %>%
layout(title = "Annual Percent Change in House Prices",xaxis = list(title="Date"), yaxis = list(title="Annual % Change in House Prices"))
plot_ly(data=sdt2,x = ~date, y = ~hpa100, height=750,text=~state,color=~state,) %>%
add_lines(name="Selected state States",colors=I("red"),alpha=0.7,colors=pal) %>%
layout(title = "Annual Percent Change in House Prices",xaxis = list(title="Date"), yaxis = list(title="Annual % Change in House Prices"))
length(unique(sdt$state))
pal <- viridis(52)
pal <- setNames(pal, unique(sdt$state))
pal
plot_ly(data=sdt2,x = ~date, y = ~hpa100, height=750,text=~state,color=~state,colors=pal) %>%
add_lines(name="Selected state States",colors=I("red"),alpha=0.7)
plot_ly(data=sdt2,x = ~date, y = ~hpa100, height=750,text=~state,color=~state) %>%
add_lines(name="Selected state States",colors=I("red"),alpha=0.7)
plot_ly(data=sdt2,x = ~date, y = ~hpa100, height=750,text=~state,color=~state) %>%
add_lines(name="Selected state States",alpha=0.7,colors=pal) %>%
layout(title = "Annual Percent Change in House Prices",xaxis = list(title="Date"), yaxis = list(title="Annual % Change in House Prices"))
plot_ly(data=d3,x = ~date, y = ~hpa12, text=~mytext2,height=750) %>%
add_lines(name="Selected state States",colors="red",alpha=0.7, hoverinfo = "text") %>%
add_lines(name="All State",data=d3a,x=~date,y=~hpa12,
colors="black",color=~state,alpha=0.1,showlegend=F,hoverinfo="none") %>%
layout(title = "Annual Percent Change in House Prices",xaxis = list(title="Date"), yaxis = list(title="Annual % Change in House Prices"))
plot_ly(data=sdt2,x = ~date, y = ~hpa100, height=750,text=~state) %>%
add_lines(name="Selected state States",alpha=0.7, showlegend = FALSE) %>%
layout(title = "Annual Percent Change in House Prices",xaxis = list(title="Date"), yaxis = list(title="Annual % Change in House Prices"))
KnitPost <- function(site.path='/pathToYourBlog/', overwriteAll=F, overwriteOne=NULL) {
if(!'package:knitr' %in% search()) library('knitr')
## Blog-specific directories.  This will depend on how you organize your blog.
site.path <- site.path # directory of jekyll blog (including trailing slash)
rmd.path <- paste0(site.path, "_Rmd") # directory where your Rmd-files reside (relative to base)
fig.dir <- "img/Rfig/" # directory to save figures
posts.path <- paste0(site.path, "_posts/") # directory for converted markdown files
cache.path <- paste0(site.path, "_cache/") # necessary for plots
render_jekyll(highlight = "pygments")
opts_knit$set(base.url = '/', base.dir = site.path)
opts_chunk$set(fig.path=fig.dir, fig.width=8.5, fig.height=5.25, dev='svg', cache=F,
warning=F, message=F, cache.path=cache.path, tidy=F)
setwd(rmd.path) # setwd to base
# some logic to help us avoid overwriting already existing md files
files.rmd <- data.frame(rmd = list.files(path = rmd.path,
full.names = T,
pattern = "\\.Rmd$",
ignore.case = T,
recursive = F), stringsAsFactors=F)
files.rmd$corresponding.md.file <- paste0(posts.path, "/", basename(gsub(pattern = "\\.Rmd$", replacement = ".md", x = files.rmd$rmd)))
files.rmd$corresponding.md.exists <- file.exists(files.rmd$corresponding.md.file)
## determining which posts to overwrite from parameters overwriteOne & overwriteAll
files.rmd$md.overwriteAll <- overwriteAll
if(is.null(overwriteOne)==F) files.rmd$md.overwriteAll[grep(overwriteOne, files.rmd[,'rmd'], ignore.case=T)] <- T
files.rmd$md.render <- F
for (i in 1:dim(files.rmd)[1]) {
if (files.rmd$corresponding.md.exists[i] == F) {
files.rmd$md.render[i] <- T
}
if ((files.rmd$corresponding.md.exists[i] == T) && (files.rmd$md.overwriteAll[i] == T)) {
files.rmd$md.render[i] <- T
}
}
# For each Rmd file, render markdown (contingent on the flags set above)
for (i in 1:dim(files.rmd)[1]) {
if (files.rmd$md.render[i] == T) {
out.file <- knit(as.character(files.rmd$rmd[i]),
output = as.character(files.rmd$corresponding.md.file[i]),
envir = parent.frame(),
quiet = T)
message(paste0("KnitPost(): ", basename(files.rmd$rmd[i])))
}
}
}
library("knitr")
#KnitPost(site.path="C:/Users/Leonard/Documents/webpage/live/lenkiefer.github.com/", overwriteAll=TRUE, overwriteOne=NULL)
#KnitPost(site.path="C:/Users/Leonard/Documents/webpage/live/lenkiefer.github.com/", overwriteAll=FALSE, overwriteOne=4)
#brocks::htmlwidgets_deps(a)
KnitPost(site.path="C:/Users/Leonard/Documents/webpage/live/lenkiefer.github.com/", overwriteAll=T, overwriteOne=NULL)
KnitPost <- function(site.path='/pathToYourBlog/', overwriteAll=F, overwriteOne=NULL) {
if(!'package:knitr' %in% search()) library('knitr')
## Blog-specific directories.  This will depend on how you organize your blog.
site.path <- site.path # directory of jekyll blog (including trailing slash)
rmd.path <- paste0(site.path, "_Rmd") # directory where your Rmd-files reside (relative to base)
fig.dir <- "img/Rfig/" # directory to save figures
posts.path <- paste0(site.path, "_posts/") # directory for converted markdown files
cache.path <- paste0(site.path, "_cache/") # necessary for plots
render_jekyll(highlight = "pygments")
opts_knit$set(base.url = '/', base.dir = site.path)
opts_chunk$set(fig.path=fig.dir, fig.width=8.5, fig.height=5.25, dev='svg', cache=F,
warning=F, message=F, cache.path=cache.path, tidy=F)
setwd(rmd.path) # setwd to base
# some logic to help us avoid overwriting already existing md files
files.rmd <- data.frame(rmd = list.files(path = rmd.path,
full.names = T,
pattern = "\\.Rmd$",
ignore.case = T,
recursive = F), stringsAsFactors=F)
files.rmd$corresponding.md.file <- paste0(posts.path, "/", basename(gsub(pattern = "\\.Rmd$", replacement = ".md", x = files.rmd$rmd)))
files.rmd$corresponding.md.exists <- file.exists(files.rmd$corresponding.md.file)
## determining which posts to overwrite from parameters overwriteOne & overwriteAll
files.rmd$md.overwriteAll <- overwriteAll
if(is.null(overwriteOne)==F) files.rmd$md.overwriteAll[grep(overwriteOne, files.rmd[,'rmd'], ignore.case=T)] <- T
files.rmd$md.render <- F
for (i in 1:dim(files.rmd)[1]) {
if (files.rmd$corresponding.md.exists[i] == F) {
files.rmd$md.render[i] <- T
}
if ((files.rmd$corresponding.md.exists[i] == T) && (files.rmd$md.overwriteAll[i] == T)) {
files.rmd$md.render[i] <- T
}
}
# For each Rmd file, render markdown (contingent on the flags set above)
for (i in 1:dim(files.rmd)[1]) {
if (files.rmd$md.render[i] == T) {
out.file <- knit(as.character(files.rmd$rmd[i]),
output = as.character(files.rmd$corresponding.md.file[i]),
envir = parent.frame(),
quiet = T)
message(paste0("KnitPost(): ", basename(files.rmd$rmd[i])))
}
}
}
library("knitr")
#KnitPost(site.path="C:/Users/Leonard/Documents/webpage/live/lenkiefer.github.com/", overwriteAll=TRUE, overwriteOne=NULL)
#KnitPost(site.path="C:/Users/Leonard/Documents/webpage/live/lenkiefer.github.com/", overwriteAll=FALSE, overwriteOne=4)
#brocks::htmlwidgets_deps(a)
KnitPost(site.path="C:/Users/Leonard/Documents/webpage/live/lenkiefer.github.com/", overwriteAll=T, overwriteOne=NULL)
KnitPost(site.path="C:/Users/Leonard/Documents/webpage/live/lenkiefer.github.com/", overwriteAll=T, overwriteOne=NULL)
KnitPost(site.path="C:/Users/Leonard/Documents/webpage/live/lenkiefer.github.com/", overwriteAll=T, overwriteOne=NULL)
KnitPost(site.path="C:/Users/Leonard/Documents/webpage/live/lenkiefer.github.com/", overwriteAll=T, overwriteOne=NULL)
