tf<-data.table(tf)
tf
i
ggplot(data=tf[.frame==i],aes(x=x,y=rate,color=date,fill=date))+
theme_minimal()+scale_x_continuous(breaks=seq(1,5,1),labels=c("2016","2017","2018","2019","Longer Run"))+
geom_point(shape=21,aes(color=date),alpha=0.82,size=3)+
#  geom_point(size=3,data=tf[.frame==i & a >0,],aes(color=date,alpha=a))+
scale_y_continuous(limits=c(0,4.5))+
scale_color_manual(limits=c("March 2016","June 2016","September 2016","December 2016"),values=c(viridis(10)[2],viridis(10)[4],viridis(10)[6],viridis(10)[8]))+
scale_fill_manual(limits=c("March 2016","June 2016","September 2016","December 2016"),values=c(viridis(10)[2],viridis(10)[4],viridis(10)[6],viridis(10)[8]))+
labs(y="Midpoint of target range or target level for the federal funds rate (%)",x="Horizon",
subtitle=tf[.frame==i & rate>0]$date,
title="FOMC participants' assessments of appropriate monetary policy:\nMidpoint of target range or target level for the federal funds rate",
caption=label_wrap_gen(100)(caption))+
theme(plot.title=element_text(size=14))+theme(plot.caption=element_text(hjust=0,vjust=1,margin=margin(t=10)))+
theme(plot.margin=unit(c(0.25,0.25,0.25,0.25),"cm"))+  theme(legend.justification=c(0,0), legend.position="none")
oopt = ani.options(interval = 0.01)
saveGIF({for (i in 1:max(tf$.frame)) {
g<-
ggplot(data=tf[.frame==i],aes(x=x,y=rate,color=date,fill=date))+
theme_minimal()+scale_x_continuous(breaks=seq(1,5,1),labels=c("2016","2017","2018","2019","Longer Run"))+
geom_point(shape=21,aes(color=date),alpha=0.82,size=3)+
#  geom_point(size=3,data=tf[.frame==i & a >0,],aes(color=date,alpha=a))+
scale_y_continuous(limits=c(0,4.5))+
scale_color_manual(limits=c("March 2016","June 2016","September 2016","December 2016"),values=c(viridis(10)[2],viridis(10)[4],viridis(10)[6],viridis(10)[8]))+
scale_fill_manual(limits=c("March 2016","June 2016","September 2016","December 2016"),values=c(viridis(10)[2],viridis(10)[4],viridis(10)[6],viridis(10)[8]))+
labs(y="Midpoint of target range or target level for the federal funds rate (%)",x="Horizon",
subtitle=tf[.frame==i & rate>0]$date,
title="FOMC participants' assessments of appropriate monetary policy:\nMidpoint of target range or target level for the federal funds rate",
caption=label_wrap_gen(100)(caption))+
theme(plot.title=element_text(size=14))+theme(plot.caption=element_text(hjust=0,vjust=1,margin=margin(t=10)))+
theme(plot.margin=unit(c(0.25,0.25,0.25,0.25),"cm"))+  theme(legend.justification=c(0,0), legend.position="none")
print(g)
ani.pause()
print(i)
}
},movie.name="fed_dots_2016 dec 14 2016 v2.gif",ani.width = 575, ani.height = 450)
tf <- tween_states(list(df12,df3,df6,df9,df12), tweenlength= 3, statelength=1, ease=rep('cubic-in-out',2),nframes=60)
tf<-data.table(tf)
tf
setwd('C:/Users/Leonard/Documents/Data Viz/blog/dots')
#dots<-fread("dots.txt")
#dots$date<-as.Date(dots$date, format="%m/%d/%Y")
#d2<-gather(dots,date,Y2016,y2017,y2018)
#load dots for jun 2016
d6<-fread("jun2016.txt")
xlist<-unique(d6$x)
d6$x<-factor(d6$x)
N<-length(d6$rate)
g<-ggplot(data=d6,
aes(x=x,y=rate))+theme_minimal()
for (yy in 1:length(ylist)){
for (i in 1:length(d6[y==ylist[yy]]$x) ){
for (j in 1:d6[y==ylist[yy]]$count[i])
{if (d6[y==ylist[yy]]$count[i]>0){
g<-g+geom_point(data=data.frame(x=ylist[yy]+j,y=), aes(x=x,y=y),size=2,color="#00B0F0")}
}
}
}
#set width factor
d6<-fread("jun2016.txt")
xlist<-unique(d6$x)
df<-data.frame(rate=numeric(),x=numeric())
#str(df)
for (yy in 1:length(xlist)){
for (i in 1:length(d6[x==xlist[yy]]$rate) ){
for (j in 1:d6[x==xlist[yy] ]$count[i])
{if (d6[x==xlist[yy]]$count[i]>0){
myc<-j
df1<-data.frame(rate=d6[x==xlist[yy]]$rate[i],x=ifelse(d6[x==xlist[yy]]$count[i] %% 2 ==1,
ifelse(myc %% 2 ==1,yy+(-1)^myc * (myc-1)*0.04,yy+(-1)^myc * (myc)*0.04),
yy-.02+(-1)^myc * (myc)*0.04)   )
df<-rbind(df,df1)
}}}}
df6<-df
df6<-rbind(df6,data.frame(rate=8,x=4))
#one participant didn't subit in June, so add dummy variable at 0
#replicate for march 2016
d3<-fread("mar2016.txt")
ylist<-unique(d3$y)
df<-data.frame(rate=numeric(),x=numeric())
#str(df)
for (yy in 1:length(ylist)){
for (i in 1:length(d3[y==ylist[yy]]$x) ){
for (j in 1:d3[y==ylist[yy] ]$count[i])
{if (d3[y==ylist[yy]]$count[i]>0){
myc<-j
df1<-data.frame(rate=d3[y==ylist[yy]]$x[i],x=ifelse(d3[y==ylist[yy]]$count[i] %% 2 ==1,
ifelse(myc %% 2 ==1,yy+(-1)^myc * (myc-1)*0.04,yy+(-1)^myc * (myc)*0.04),
yy-.02+(-1)^myc * (myc)*0.04)   )
df<-rbind(df,df1)
}}}}
df3<-df
d9<-fread("sep2016.txt")
#d9<-d9[y != 2019,]
ylist<-unique(d9$y)
df<-data.frame(rate=numeric(),x=numeric())
#str(df)
for (yy in 1:length(ylist)){
for (i in 1:length(d9[y==ylist[yy]]$x) ){
for (j in 1:d9[y==ylist[yy] ]$count[i])
{if (d9[y==ylist[yy]]$count[i]>0){
myc<-j
df1<-data.frame(rate=d9[y==ylist[yy]]$x[i],x=ifelse(d9[y==ylist[yy]]$count[i] %% 2 ==1,
ifelse(myc %% 2 ==1,yy+(-1)^myc * (myc-1)*0.04,yy+(-1)^myc * (myc)*0.04),
yy-.02+(-1)^myc * (myc)*0.04)   )
df<-rbind(df,df1)
}}}}
df9<-df
df9<-rbind(df9,data.frame(rate=8,x=4))
d12<-fread("dec2016.txt")
#d12<-d12[y != 2019,]
ylist<-unique(d12$y)
df<-data.frame(rate=numeric(),x=numeric())
#str(df)
for (yy in 1:length(ylist)){
for (i in 1:length(d12[y==ylist[yy]]$x) ){
for (j in 1:d12[y==ylist[yy] ]$count[i])
{if (d12[y==ylist[yy]]$count[i]>0){
myc<-j
df1<-data.frame(rate=d12[y==ylist[yy]]$x[i],x=ifelse(d12[y==ylist[yy]]$count[i] %% 2 ==1,
ifelse(myc %% 2 ==1,yy+(-1)^myc * (myc-1)*0.04,yy+(-1)^myc * (myc)*0.04),
yy-.02+(-1)^myc * (myc)*0.04)   )
df<-rbind(df,df1)
}}}}
df12<-df
df12<-rbind(df12,data.frame(rate=8,x=4))
# pad March and June
# Need this number
n.pad<-nrow(df9)-nrow(df3)
df.pad<-data.frame(rate=rep(3,n.pad),x=rep(0,n.pad))
df3<-rbind(df3,df.pad)
df6<-rbind(df6,df.pad)
#tween the data sets.
df3$date<-factor("March 2016")  #set date label
df6$date<-factor("June 2016")   #set date label
df9$date<-factor("September 2016")
df12$date<-factor("December 2016")
df3<-data.table(df3)
df6<-data.table(df6)
df3[x>3.5,x:=x+1]
df6[x>3.5,x:=x+1]
df3<-data.frame(df3)
df6<-data.frame(df6)
tf <- tween_states(list(df12,df3,df6,df9,df12), tweenlength= 3, statelength=1, ease=rep('cubic-in-out',2),nframes=60)
tf<-data.table(tf)
tf
unique(tf$date)
df3
df12
df12
df3
ggplot(data=tf[.frame==i],aes(x=x,y=rate,color=date,fill=date))+
theme_minimal()+scale_x_continuous(breaks=seq(1,5,1),labels=c("2016","2017","2018","2019","Longer Run"))+
geom_point(shape=21,aes(color=date),alpha=0.82,size=3)+
#  geom_point(size=3,data=tf[.frame==i & a >0,],aes(color=date,alpha=a))+
scale_y_continuous(limits=c(0,4.5))+
scale_color_manual(limits=c("March 2016","June 2016","September 2016","December 2016"),values=c(viridis(10)[2],viridis(10)[4],viridis(10)[6],viridis(10)[8]))+
scale_fill_manual(limits=c("March 2016","June 2016","September 2016","December 2016"),values=c(viridis(10)[2],viridis(10)[4],viridis(10)[6],viridis(10)[8]))+
labs(y="Midpoint of target range or target level for the federal funds rate (%)",x="Horizon",
subtitle=tf[.frame==i & rate>0]$date,
title="FOMC participants' assessments of appropriate monetary policy:\nMidpoint of target range or target level for the federal funds rate",
caption=label_wrap_gen(100)(caption))+
theme(plot.title=element_text(size=14))+theme(plot.caption=element_text(hjust=0,vjust=1,margin=margin(t=10)))+
theme(plot.margin=unit(c(0.25,0.25,0.25,0.25),"cm"))+  theme(legend.justification=c(0,0), legend.position="none")
getwd()
tf <- tween_states(list(df12,df3,df6,df9,df12), tweenlength= 3, statelength=1, ease=rep('cubic-in-out',2),nframes=60)
tf<-data.table(tf)
tf
tf[.i==20]
tf[.frame==20]
librarrate(data.table)
library(animation)
library(ggplot2)
library(scales)
library(ggthemes)
library(data.table)
library(tweenr)
library(zoo)
library(lubridate)
library(gganimate)
library(tidyr)
setwd('C:/Users/Leonard/Documents/Data Viz/blog/dots')
#dots<-fread("dots.txt")
#dots$date<-as.Date(dots$date, format="%m/%d/%Y")
#d2<-gather(dots,date,Y2016,y2017,y2018)
#load dots for jun 2016
d6<-fread("jun2016.txt")
xlist<-unique(d6$x)
d6$x<-factor(d6$x)
N<-length(d6$rate)
g<-ggplot(data=d6,
aes(x=x,y=rate))+theme_minimal()
for (yy in 1:length(ylist)){
for (i in 1:length(d6[y==ylist[yy]]$x) ){
for (j in 1:d6[y==ylist[yy]]$count[i])
{if (d6[y==ylist[yy]]$count[i]>0){
g<-g+geom_point(data=data.frame(x=ylist[yy]+j,y=), aes(x=x,y=y),size=2,color="#00B0F0")}
}
}
}
#set width factor
d6<-fread("jun2016.txt")
xlist<-unique(d6$x)
df<-data.frame(rate=numeric(),x=numeric())
#str(df)
for (yy in 1:length(xlist)){
for (i in 1:length(d6[x==xlist[yy]]$rate) ){
for (j in 1:d6[x==xlist[yy] ]$count[i])
{if (d6[x==xlist[yy]]$count[i]>0){
myc<-j
df1<-data.frame(rate=d6[x==xlist[yy]]$rate[i],x=ifelse(d6[x==xlist[yy]]$count[i] %% 2 ==1,
ifelse(myc %% 2 ==1,yy+(-1)^myc * (myc-1)*0.04,yy+(-1)^myc * (myc)*0.04),
yy-.02+(-1)^myc * (myc)*0.04)   )
df<-rbind(df,df1)
}}}}
df6<-df
df6<-rbind(df6,data.frame(rate=8,x=4))
#one participant didn't subit in June, so add dummy variable at 0
#replicate for march 2016
d3<-fread("mar2016.txt")
ylist<-unique(d3$y)
df<-data.frame(rate=numeric(),x=numeric())
#str(df)
for (yy in 1:length(ylist)){
for (i in 1:length(d3[y==ylist[yy]]$x) ){
for (j in 1:d3[y==ylist[yy] ]$count[i])
{if (d3[y==ylist[yy]]$count[i]>0){
myc<-j
df1<-data.frame(rate=d3[y==ylist[yy]]$x[i],x=ifelse(d3[y==ylist[yy]]$count[i] %% 2 ==1,
ifelse(myc %% 2 ==1,yy+(-1)^myc * (myc-1)*0.04,yy+(-1)^myc * (myc)*0.04),
yy-.02+(-1)^myc * (myc)*0.04)   )
df<-rbind(df,df1)
}}}}
df3<-df
d9<-fread("sep2016.txt")
#d9<-d9[y != 2019,]
ylist<-unique(d9$y)
df<-data.frame(rate=numeric(),x=numeric())
#str(df)
for (yy in 1:length(ylist)){
for (i in 1:length(d9[y==ylist[yy]]$x) ){
for (j in 1:d9[y==ylist[yy] ]$count[i])
{if (d9[y==ylist[yy]]$count[i]>0){
myc<-j
df1<-data.frame(rate=d9[y==ylist[yy]]$x[i],x=ifelse(d9[y==ylist[yy]]$count[i] %% 2 ==1,
ifelse(myc %% 2 ==1,yy+(-1)^myc * (myc-1)*0.04,yy+(-1)^myc * (myc)*0.04),
yy-.02+(-1)^myc * (myc)*0.04)   )
df<-rbind(df,df1)
}}}}
df9<-df
df9<-rbind(df9,data.frame(rate=8,x=4))
d12<-fread("dec2016.txt")
#d12<-d12[y != 2019,]
ylist<-unique(d12$y)
df<-data.frame(rate=numeric(),x=numeric())
#str(df)
for (yy in 1:length(ylist)){
for (i in 1:length(d12[y==ylist[yy]]$x) ){
for (j in 1:d12[y==ylist[yy] ]$count[i])
{if (d12[y==ylist[yy]]$count[i]>0){
myc<-j
df1<-data.frame(rate=d12[y==ylist[yy]]$x[i],x=ifelse(d12[y==ylist[yy]]$count[i] %% 2 ==1,
ifelse(myc %% 2 ==1,yy+(-1)^myc * (myc-1)*0.04,yy+(-1)^myc * (myc)*0.04),
yy-.02+(-1)^myc * (myc)*0.04)   )
df<-rbind(df,df1)
}}}}
df12<-df
df12<-rbind(df12,data.frame(rate=8,x=4))
# pad March and June
# Need this number
n.pad<-nrow(df9)-nrow(df3)
df.pad<-data.frame(x=rep(3,n.pad),rate=rep(0,n.pad))
df3<-rbind(df3,df.pad)
df6<-rbind(df6,df.pad)
df3$date<-factor("March 2016")  #set date label
df6$date<-factor("June 2016")   #set date label
df9$date<-factor("September 2016")
df12$date<-factor("December 2016")
df3<-data.table(df3)
df6<-data.table(df6)
df3[x>3.5,x:=x+1]
df6[x>3.5,x:=x+1]
df3<-data.frame(df3)
df6<-data.frame(df6)
df3
ggplot(data=df.all,aes(x=x,y=rate,color=date))+
theme_minimal()+scale_x_continuous(breaks=seq(1,5,1),labels=c("2016","2017","2018","2019","Longer Run"))+
geom_point(size=2,aes(color=date))+scale_y_continuous(limits=c(0,4.5))+
scale_color_manual(limits=c("March 2016","June 2016","September 2016","December 2016"),values=c(viridis(10)[2],viridis(10)[4],viridis(10)[6],viridis(10)[8]))+
labs(y="Midpoint of target range or target level for the federal funds rate (%)",x="Horizon",
subtitle=tf[.frame==i]$date,
title="FOMC participants' assessments of appropriate monetary policy:\nMidpoint of target range or target level for the federal funds rate",
caption=label_wrap_gen(100)(caption))+
facet_wrap(~date)+
theme(plot.title=element_text(size=14))+theme(plot.caption=element_text(hjust=0,vjust=1,margin=margin(t=10)))+
theme(plot.margin=unit(c(0.25,0.25,0.25,0.25),"cm"))+  theme(legend.justification=c(0,0), legend.position="none")
tf <- tween_states(list(df12,df3,df6,df9,df12), tweenlength= 3, statelength=1, ease=rep('cubic-in-out',2),nframes=60)
tf<-data.table(tf)
oopt = ani.options(interval = 0.01)
saveGIF({for (i in 1:max(tf$.frame)) {
g<-
ggplot(data=tf[.frame==i],aes(x=x,y=rate,color=date,fill=date))+
theme_minimal()+scale_x_continuous(breaks=seq(1,5,1),labels=c("2016","2017","2018","2019","Longer Run"))+
geom_point(shape=21,aes(color=date),alpha=0.82,size=3)+
#  geom_point(size=3,data=tf[.frame==i & a >0,],aes(color=date,alpha=a))+
scale_y_continuous(limits=c(0,4.5))+
scale_color_manual(limits=c("March 2016","June 2016","September 2016","December 2016"),values=c(viridis(10)[2],viridis(10)[4],viridis(10)[6],viridis(10)[8]))+
scale_fill_manual(limits=c("March 2016","June 2016","September 2016","December 2016"),values=c(viridis(10)[2],viridis(10)[4],viridis(10)[6],viridis(10)[8]))+
labs(y="Midpoint of target range or target level for the federal funds rate (%)",x="Horizon",
subtitle=tf[.frame==i & rate>0]$date,
title="FOMC participants' assessments of appropriate monetary policy:\nMidpoint of target range or target level for the federal funds rate",
caption=label_wrap_gen(100)(caption))+
theme(plot.title=element_text(size=14))+theme(plot.caption=element_text(hjust=0,vjust=1,margin=margin(t=10)))+
theme(plot.margin=unit(c(0.25,0.25,0.25,0.25),"cm"))+  theme(legend.justification=c(0,0), legend.position="none")
print(g)
ani.pause()
print(i)
}
},movie.name="fed_dots_2016 dec 14 2016 v2.gif",ani.width = 575, ani.height = 450)
librarrate(data.table)
library(animation)
library(ggplot2)
library(scales)
library(ggthemes)
library(data.table)
library(tweenr)
library(zoo)
library(lubridate)
library(gganimate)
library(tidyr)
setwd('C:/Users/Leonard/Documents/Data Viz/blog/dots')
#dots<-fread("dots.txt")
#dots$date<-as.Date(dots$date, format="%m/%d/%Y")
#d2<-gather(dots,date,Y2016,y2017,y2018)
#load dots for jun 2016
d6<-fread("jun2016.txt")
xlist<-unique(d6$x)
d6$x<-factor(d6$x)
N<-length(d6$rate)
g<-ggplot(data=d6,
aes(x=x,y=rate))+theme_minimal()
for (yy in 1:length(ylist)){
for (i in 1:length(d6[y==ylist[yy]]$x) ){
for (j in 1:d6[y==ylist[yy]]$count[i])
{if (d6[y==ylist[yy]]$count[i]>0){
g<-g+geom_point(data=data.frame(x=ylist[yy]+j,y=), aes(x=x,y=y),size=2,color="#00B0F0")}
}
}
}
#set width factor
d6<-fread("jun2016.txt")
xlist<-unique(d6$x)
df<-data.frame(rate=numeric(),x=numeric())
#str(df)
for (yy in 1:length(xlist)){
for (i in 1:length(d6[x==xlist[yy]]$rate) ){
for (j in 1:d6[x==xlist[yy] ]$count[i])
{if (d6[x==xlist[yy]]$count[i]>0){
myc<-j
df1<-data.frame(rate=d6[x==xlist[yy]]$rate[i],x=ifelse(d6[x==xlist[yy]]$count[i] %% 2 ==1,
ifelse(myc %% 2 ==1,yy+(-1)^myc * (myc-1)*0.04,yy+(-1)^myc * (myc)*0.04),
yy-.02+(-1)^myc * (myc)*0.04)   )
df<-rbind(df,df1)
}}}}
df6<-df
df6<-rbind(df6,data.frame(rate=8,x=4))
#one participant didn't subit in June, so add dummy variable at 0
#replicate for march 2016
d3<-fread("mar2016.txt")
ylist<-unique(d3$y)
df<-data.frame(rate=numeric(),x=numeric())
#str(df)
for (yy in 1:length(ylist)){
for (i in 1:length(d3[y==ylist[yy]]$x) ){
for (j in 1:d3[y==ylist[yy] ]$count[i])
{if (d3[y==ylist[yy]]$count[i]>0){
myc<-j
df1<-data.frame(rate=d3[y==ylist[yy]]$x[i],x=ifelse(d3[y==ylist[yy]]$count[i] %% 2 ==1,
ifelse(myc %% 2 ==1,yy+(-1)^myc * (myc-1)*0.04,yy+(-1)^myc * (myc)*0.04),
yy-.02+(-1)^myc * (myc)*0.04)   )
df<-rbind(df,df1)
}}}}
df3<-df
d9<-fread("sep2016.txt")
#d9<-d9[y != 2019,]
ylist<-unique(d9$y)
df<-data.frame(rate=numeric(),x=numeric())
#str(df)
for (yy in 1:length(ylist)){
for (i in 1:length(d9[y==ylist[yy]]$x) ){
for (j in 1:d9[y==ylist[yy] ]$count[i])
{if (d9[y==ylist[yy]]$count[i]>0){
myc<-j
df1<-data.frame(rate=d9[y==ylist[yy]]$x[i],x=ifelse(d9[y==ylist[yy]]$count[i] %% 2 ==1,
ifelse(myc %% 2 ==1,yy+(-1)^myc * (myc-1)*0.04,yy+(-1)^myc * (myc)*0.04),
yy-.02+(-1)^myc * (myc)*0.04)   )
df<-rbind(df,df1)
}}}}
df9<-df
df9<-rbind(df9,data.frame(rate=8,x=4))
d12<-fread("dec2016.txt")
#d12<-d12[y != 2019,]
ylist<-unique(d12$y)
df<-data.frame(rate=numeric(),x=numeric())
#str(df)
for (yy in 1:length(ylist)){
for (i in 1:length(d12[y==ylist[yy]]$x) ){
for (j in 1:d12[y==ylist[yy] ]$count[i])
{if (d12[y==ylist[yy]]$count[i]>0){
myc<-j
df1<-data.frame(rate=d12[y==ylist[yy]]$x[i],x=ifelse(d12[y==ylist[yy]]$count[i] %% 2 ==1,
ifelse(myc %% 2 ==1,yy+(-1)^myc * (myc-1)*0.04,yy+(-1)^myc * (myc)*0.04),
yy-.02+(-1)^myc * (myc)*0.04)   )
df<-rbind(df,df1)
}}}}
df12<-df
df12<-rbind(df12,data.frame(rate=8,x=4))
# pad March and June
# Need this number
n.pad<-nrow(df9)-nrow(df3)
df.pad<-data.frame(x=rep(3,n.pad),rate=rep(-5,n.pad))
df3<-rbind(df3,df.pad)
df6<-rbind(df6,df.pad)
#tween the data sets.
df3$date<-factor("March 2016")  #set date label
df6$date<-factor("June 2016")   #set date label
df9$date<-factor("September 2016")
df12$date<-factor("December 2016")
df3<-data.table(df3)
df6<-data.table(df6)
df3[x>3.5,x:=x+1]
df6[x>3.5,x:=x+1]
df3<-data.frame(df3)
df6<-data.frame(df6)
tf <- tween_states(list(df12,df3,df6,df9,df12), tweenlength= 3, statelength=1, ease=rep('cubic-in-out',2),nframes=60)
tf<-data.table(tf)
oopt = ani.options(interval = 0.01)
saveGIF({for (i in 1:max(tf$.frame)) {
g<-
ggplot(data=tf[.frame==i],aes(x=x,y=rate,color=date,fill=date))+
theme_minimal()+scale_x_continuous(breaks=seq(1,5,1),labels=c("2016","2017","2018","2019","Longer Run"))+
geom_point(shape=21,aes(color=date),alpha=0.82,size=3)+
#  geom_point(size=3,data=tf[.frame==i & a >0,],aes(color=date,alpha=a))+
scale_y_continuous(limits=c(0,4.5))+
scale_color_manual(limits=c("March 2016","June 2016","September 2016","December 2016"),values=c(viridis(10)[2],viridis(10)[4],viridis(10)[6],viridis(10)[8]))+
scale_fill_manual(limits=c("March 2016","June 2016","September 2016","December 2016"),values=c(viridis(10)[2],viridis(10)[4],viridis(10)[6],viridis(10)[8]))+
labs(y="Midpoint of target range or target level for the federal funds rate (%)",x="Horizon",
subtitle=tf[.frame==i & rate>0]$date,
title="FOMC participants' assessments of appropriate monetary policy:\nMidpoint of target range or target level for the federal funds rate",
caption=label_wrap_gen(100)(caption))+
theme(plot.title=element_text(size=14))+theme(plot.caption=element_text(hjust=0,vjust=1,margin=margin(t=10)))+
theme(plot.margin=unit(c(0.25,0.25,0.25,0.25),"cm"))+  theme(legend.justification=c(0,0), legend.position="none")
print(g)
ani.pause()
print(i)
}
},movie.name="fed_dots_2016 dec 14 2016 v2.gif",ani.width = 575, ani.height = 450)
df3<-data.table(df3)[x>3.5,x:=x+1]
df6<-data.table(df6)[x>3.5,x:=x+1]
KnitPost <- function(site.path='/pathToYourBlog/', overwriteAll=F, overwriteOne=NULL) {
if(!'package:knitr' %in% search()) library('knitr')
## Blog-specific directories.  This will depend on how you organize your blog.
site.path <- site.path # directory of jekyll blog (including trailing slash)
rmd.path <- paste0(site.path, "_Rmd") # directory where your Rmd-files reside (relative to base)
fig.dir <- "img/Rfig/" # directory to save figures
posts.path <- paste0(site.path, "_posts/") # directory for converted markdown files
cache.path <- paste0(site.path, "_cache/") # necessary for plots
render_jekyll(highlight = "pygments")
opts_knit$set(base.url = '/', base.dir = site.path)
opts_chunk$set(fig.path=fig.dir, fig.width=8.5, fig.height=5.25, dev='svg', cache=F,
warning=F, message=F, cache.path=cache.path, tidy=F)
setwd(rmd.path) # setwd to base
# some logic to help us avoid overwriting already existing md files
files.rmd <- data.frame(rmd = list.files(path = rmd.path,
full.names = T,
pattern = "\\.Rmd$",
ignore.case = T,
recursive = F), stringsAsFactors=F)
files.rmd$corresponding.md.file <- paste0(posts.path, "/", basename(gsub(pattern = "\\.Rmd$", replacement = ".md", x = files.rmd$rmd)))
files.rmd$corresponding.md.exists <- file.exists(files.rmd$corresponding.md.file)
## determining which posts to overwrite from parameters overwriteOne & overwriteAll
files.rmd$md.overwriteAll <- overwriteAll
if(is.null(overwriteOne)==F) files.rmd$md.overwriteAll[grep(overwriteOne, files.rmd[,'rmd'], ignore.case=T)] <- T
files.rmd$md.render <- F
for (i in 1:dim(files.rmd)[1]) {
if (files.rmd$corresponding.md.exists[i] == F) {
files.rmd$md.render[i] <- T
}
if ((files.rmd$corresponding.md.exists[i] == T) && (files.rmd$md.overwriteAll[i] == T)) {
files.rmd$md.render[i] <- T
}
}
# For each Rmd file, render markdown (contingent on the flags set above)
for (i in 1:dim(files.rmd)[1]) {
if (files.rmd$md.render[i] == T) {
out.file <- knit(as.character(files.rmd$rmd[i]),
output = as.character(files.rmd$corresponding.md.file[i]),
envir = parent.frame(),
quiet = T)
message(paste0("KnitPost(): ", basename(files.rmd$rmd[i])))
}
}
}
library("knitr")
#KnitPost(site.path="C:/Users/Leonard/Documents/webpage/live/lenkiefer.github.com/", overwriteAll=TRUE, overwriteOne=NULL)
#KnitPost(site.path="C:/Users/Leonard/Documents/webpage/live/lenkiefer.github.com/", overwriteAll=FALSE, overwriteOne=4)
#brocks::htmlwidgets_deps(a)
KnitPost(site.path="C:/Users/Leonard/Documents/webpage/live/lenkiefer.github.com/", overwriteAll=T, overwriteOne=NULL)
KnitPost(site.path="C:/Users/Leonard/Documents/webpage/live/lenkiefer.github.com/", overwriteAll=T, overwriteOne=NULL)
KnitPost(site.path="C:/Users/Leonard/Documents/webpage/live/lenkiefer.github.com/", overwriteAll=T, overwriteOne=NULL)
KnitPost(site.path="C:/Users/Leonard/Documents/webpage/live/lenkiefer.github.com/", overwriteAll=T, overwriteOne=NULL)
