emp.dt=emp.dt[,emp:=as.numeric(value)] #convert value to numeric
# Compute year-over-year change in employment and year-over-year percent change
emp.dt=emp.dt[,emp.yoy:=emp-shift(emp,12,fill=NA),by=c("area_name","state_name")]
emp.dt=emp.dt[,emp.pc:=(emp-shift(emp,12,fill=NA))/shift(emp,12,fill=NA),by=c("area_name","state_name")]
emp.dt=emp.dt[,max.emp.st:=max(emp),by=c("state_name")]
emp.dt=emp.dt[,type:=ifelse(area_name=="Statewide","State","Metro")]
# drop states in c("Puerto Rico","Virgin Islands")
emp.dt=emp.dt[year>1989  &!(state_name %in% c("Puerto Rico","Virgin Islands")),]
emp.dt.state<-emp.dt[area_name=="Statewide"]
#emp.dt.state$polyname<-tolower(emp.dt.state$state_name)
emp.dt.state$statename<-emp.dt.state$state_name
unique(emp.dt.state$statename)
names(region)
emp.dt.state<-left_join(emp.dt.state,region[,c("statecode","statename"),by="statename"])
emp.dt.state
emp.dt.state<-emp.dt[area_name=="Statewide"]
#emp.dt.state$polyname<-tolower(emp.dt.state$state_name)
emp.dt.state$statename<-emp.dt.state$state_name
region<-fread("../geo/region.txt")
#emp.dt.state<-left_join(emp.dt.state, state.fips[,c("abb","polyname")],by="polyname")
emp.dt.state<-left_join(emp.dt.state,region[,c("statecode","statename"),with=F],by="statename"])
#emp.dt.state<-left_join(emp.dt.state, state.fips[,c("abb","polyname")],by="polyname")
emp.dt.state<-left_join(emp.dt.state,
region[,c("statecode","statename"),with=F],
by="statename")
emp.dt.state
emp.dt.state<-rename(emp.dt.state,state=statecode)
emp.dt.state$state<-as.character(emp.dt.state$state)
dt<-merge(dm,emp.dt.state[,c("date","state","state_name","emp","emp.yoy","emp.pc"),],
by=c("date","state"))
dt=dt[,hpa:=(hpi-shift(hpi,12,fill=NA))/shift(hpi,12,fill=NA),by=c("state_name")]
emp.dt3 <- dt %>% select(state_name)
emp.dt3<-unique(emp.dt3)
emp.dt4 <- emp.dt3 %>%
#mutate(y = lapply(x, function(x) {cumprod(1 + runif(365, -0.05, 0.05))})) %>%
mutate(x = lapply(state_name, myf3 ) )  %>%
mutate(x = lapply(x, function(dat) {
d3horizon_chr(
list(dat),
options = d3horizonOptions(height=20),
width = 400
)
}) )%>%
mutate(x2 = lapply(state_name, myf4 ) )  %>%
mutate(x2 = lapply(x2, function(dat) {
d3horizon_chr(
list(dat),
options = d3horizonOptions(height=20),
width = 300
)
})
)
emp.dt3 <- dt %>% select(state_name)
emp.dt3<-unique(emp.dt3)
emp.dt3
emp.dt4 <- emp.dt3 %>%
#mutate(y = lapply(x, function(x) {cumprod(1 + runif(365, -0.05, 0.05))})) %>%
mutate(x = lapply(state_name, myf3 ) )  %>%
mutate(x = lapply(x, function(dat) {
d3horizon_chr(
list(dat),
options = d3horizonOptions(height=20),
width = 400
)
}) )%>%
mutate(x2 = lapply(state_name, myf4 ) )  %>%
mutate(x2 = lapply(x2, function(dat) {
d3horizon_chr(
list(dat),
options = d3horizonOptions(height=20),
width = 300
)
})
)
datatable(
emp.dt4,
escape = FALSE,
colnames=c("State","12 month % change\n in employment (Jan 1991-March 2017)",
"12 month % change \n in house prices"),
options = list(
columnDefs = list(list(width="300px", targets = 2:3)),
fnDrawCallback = htmlwidgets::JS(
'
// not the best way but works fairly well
function(){
HTMLWidgets.staticRender();
}
'
)
)
) %>%
tagList(htmlwidgets::getDependency("d3horizon", "d3horizonR")) %>%
browsable()
KnitPost <- function(site.path='/pathToYourBlog/', overwriteAll=F, overwriteOne=NULL) {
if(!'package:knitr' %in% search()) library('knitr')
## Blog-specific directories.  This will depend on how you organize your blog.
site.path <- site.path # directory of jekyll blog (including trailing slash)
rmd.path <- paste0(site.path, "_Rmd") # directory where your Rmd-files reside (relative to base)
fig.dir <- "img/Rfig/" # directory to save figures
posts.path <- paste0(site.path, "_posts/") # directory for converted markdown files
cache.path <- paste0(site.path, "_cache/") # necessary for plots
render_jekyll(highlight = "pygments")
opts_knit$set(base.url = '/', base.dir = site.path)
opts_chunk$set(fig.path=fig.dir, fig.width=8.5, fig.height=5.25, dev='svg', cache=F,
warning=F, message=F, cache.path=cache.path, tidy=F)
setwd(rmd.path) # setwd to base
# some logic to help us avoid overwriting already existing md files
files.rmd <- data.frame(rmd = list.files(path = rmd.path,
full.names = T,
pattern = "\\.Rmd$",
ignore.case = T,
recursive = F), stringsAsFactors=F)
files.rmd$corresponding.md.file <- paste0(posts.path, "/", basename(gsub(pattern = "\\.Rmd$", replacement = ".md", x = files.rmd$rmd)))
files.rmd$corresponding.md.exists <- file.exists(files.rmd$corresponding.md.file)
## determining which posts to overwrite from parameters overwriteOne & overwriteAll
files.rmd$md.overwriteAll <- overwriteAll
if(is.null(overwriteOne)==F) files.rmd$md.overwriteAll[grep(overwriteOne, files.rmd[,'rmd'], ignore.case=T)] <- T
files.rmd$md.render <- F
for (i in 1:dim(files.rmd)[1]) {
if (files.rmd$corresponding.md.exists[i] == F) {
files.rmd$md.render[i] <- T
}
if ((files.rmd$corresponding.md.exists[i] == T) && (files.rmd$md.overwriteAll[i] == T)) {
files.rmd$md.render[i] <- T
}
}
# For each Rmd file, render markdown (contingent on the flags set above)
for (i in 1:dim(files.rmd)[1]) {
if (files.rmd$md.render[i] == T) {
out.file <- knit(as.character(files.rmd$rmd[i]),
output = as.character(files.rmd$corresponding.md.file[i]),
envir = parent.frame(),
quiet = T)
message(paste0("KnitPost(): ", basename(files.rmd$rmd[i])))
}
}
}
library("knitr")
#KnitPost(site.path="C:/Users/Leonard/Documents/webpage/live/lenkiefer.github.com/", overwriteAll=TRUE, overwriteOne=NULL)
#KnitPost(site.path="C:/Users/Leonard/Documents/webpage/live/lenkiefer.github.com/", overwriteAll=FALSE, overwriteOne=4)
#brocks::htmlwidgets_deps(a)
KnitPost(site.path="C:/Users/Leonard/Documents/webpage/live/lenkiefer.github.com/", overwriteAll=T, overwriteOne=NULL)
KnitPost <- function(site.path='/pathToYourBlog/', overwriteAll=F, overwriteOne=NULL) {
if(!'package:knitr' %in% search()) library('knitr')
## Blog-specific directories.  This will depend on how you organize your blog.
site.path <- site.path # directory of jekyll blog (including trailing slash)
rmd.path <- paste0(site.path, "_Rmd") # directory where your Rmd-files reside (relative to base)
fig.dir <- "img/Rfig/" # directory to save figures
posts.path <- paste0(site.path, "_posts/") # directory for converted markdown files
cache.path <- paste0(site.path, "_cache/") # necessary for plots
render_jekyll(highlight = "pygments")
opts_knit$set(base.url = '/', base.dir = site.path)
opts_chunk$set(fig.path=fig.dir, fig.width=8.5, fig.height=5.25, dev='svg', cache=F,
warning=F, message=F, cache.path=cache.path, tidy=F)
setwd(rmd.path) # setwd to base
# some logic to help us avoid overwriting already existing md files
files.rmd <- data.frame(rmd = list.files(path = rmd.path,
full.names = T,
pattern = "\\.Rmd$",
ignore.case = T,
recursive = F), stringsAsFactors=F)
files.rmd$corresponding.md.file <- paste0(posts.path, "/", basename(gsub(pattern = "\\.Rmd$", replacement = ".md", x = files.rmd$rmd)))
files.rmd$corresponding.md.exists <- file.exists(files.rmd$corresponding.md.file)
## determining which posts to overwrite from parameters overwriteOne & overwriteAll
files.rmd$md.overwriteAll <- overwriteAll
if(is.null(overwriteOne)==F) files.rmd$md.overwriteAll[grep(overwriteOne, files.rmd[,'rmd'], ignore.case=T)] <- T
files.rmd$md.render <- F
for (i in 1:dim(files.rmd)[1]) {
if (files.rmd$corresponding.md.exists[i] == F) {
files.rmd$md.render[i] <- T
}
if ((files.rmd$corresponding.md.exists[i] == T) && (files.rmd$md.overwriteAll[i] == T)) {
files.rmd$md.render[i] <- T
}
}
# For each Rmd file, render markdown (contingent on the flags set above)
for (i in 1:dim(files.rmd)[1]) {
if (files.rmd$md.render[i] == T) {
out.file <- knit(as.character(files.rmd$rmd[i]),
output = as.character(files.rmd$corresponding.md.file[i]),
envir = parent.frame(),
quiet = T)
message(paste0("KnitPost(): ", basename(files.rmd$rmd[i])))
}
}
}
library("knitr")
#KnitPost(site.path="C:/Users/Leonard/Documents/webpage/live/lenkiefer.github.com/", overwriteAll=TRUE, overwriteOne=NULL)
#KnitPost(site.path="C:/Users/Leonard/Documents/webpage/live/lenkiefer.github.com/", overwriteAll=FALSE, overwriteOne=4)
#brocks::htmlwidgets_deps(a)
KnitPost(site.path="C:/Users/Leonard/Documents/webpage/live/lenkiefer.github.com/", overwriteAll=T, overwriteOne=NULL)
KnitPost(site.path="C:/Users/Leonard/Documents/webpage/live/lenkiefer.github.com/", overwriteAll=T, overwriteOne=NULL)
KnitPost(site.path="C:/Users/Leonard/Documents/webpage/live/lenkiefer.github.com/", overwriteAll=T, overwriteOne=NULL)
getwd()
df<-fread("data/hpistate.csv")
df$date<-as.Date(df$date, format="%m/%d/%Y")
df
################################################################################
### Load libraries
################################################################################
library(tidyverse)
library(data.table)
################################################################################
### Load libraries
################################################################################
df<-fread("data/hpistate.csv")
df$date<-as.Date(df$date, format="%m/%d/%Y")
htmlTable::htmlTable(head(df))
################################################################################
### Go get data from BLS.gov
################################################################################
emp.data<-fread("https://download.bls.gov/pub/time.series/sm/sm.data.54.TotalNonFarm.All")
emp.series<-fread("https://download.bls.gov/pub/time.series/sm/sm.series")
emp.list<-emp.series[industry_code==0 # get all employment
& data_type_code==1 # get employment in thousands
& seasonal=="S",]  # get seasonally adjusted data]
emp.area<-fread("https://download.bls.gov/pub/time.series/sm/sm.area",
col.names=c("area_code","area_name","drop"))[,c("area_code","area_name"),with=F]
emp.st<-fread("https://download.bls.gov/pub/time.series/sm/sm.state",
col.names=c("state_code","state_name","drop"))[,c("state_code","state_name"),with=F]
# merge data
emp.dt<-merge(emp.data,emp.list,by="series_id",all.y=T)
#create month variable
emp.dt=emp.dt[,month:=as.numeric(substr(emp.dt$period,2,3))]
# (this assignment is to get around knitr/data table printing error)
# see e.g. http://stackoverflow.com/questions/15267018/knitr-gets-tricked-by-data-table-assignment
# M13 = Annual average, drop it:
emp.dt<-emp.dt[month<13,]
#create date variable
emp.dt$date<- as.Date(ISOdate(emp.dt$year,emp.dt$month,1) )
# merge on area and state codes
emp.dt<-merge(emp.dt,emp.area,by="area_code")
emp.dt<-merge(emp.dt,emp.st,by="state_code")
emp.dt=emp.dt[,c("state_name","area_name","date","year","month","value"),with=F]
emp.dt=emp.dt[,emp:=as.numeric(value)] #convert value to numeric
# Compute year-over-year change in employment and year-over-year percent change
emp.dt=emp.dt[,emp.yoy:=emp-shift(emp,12,fill=NA),by=c("area_name","state_name")]
emp.dt=emp.dt[,emp.pc:=(emp-shift(emp,12,fill=NA))/shift(emp,12,fill=NA),by=c("area_name","state_name")]
emp.dt=emp.dt[,max.emp.st:=max(emp),by=c("state_name")]
emp.dt=emp.dt[,type:=ifelse(area_name=="Statewide","State","Metro")]
# drop states in c("Puerto Rico","Virgin Islands")
emp.dt=emp.dt[!(state_name %in% c("Puerto Rico","Virgin Islands")),]
# only keep state data
emp.dt.state<-emp.dt[area_name=="Statewide"]
htmlTable::htmlTable(head(emp.dt.state)))
################################################################################
### Go get data from BLS.gov
################################################################################
emp.data<-fread("https://download.bls.gov/pub/time.series/sm/sm.data.54.TotalNonFarm.All")
emp.series<-fread("https://download.bls.gov/pub/time.series/sm/sm.series")
emp.list<-emp.series[industry_code==0 # get all employment
& data_type_code==1 # get employment in thousands
& seasonal=="S",]  # get seasonally adjusted data]
emp.area<-fread("https://download.bls.gov/pub/time.series/sm/sm.area",
col.names=c("area_code","area_name","drop"))[,c("area_code","area_name"),with=F]
emp.st<-fread("https://download.bls.gov/pub/time.series/sm/sm.state",
col.names=c("state_code","state_name","drop"))[,c("state_code","state_name"),with=F]
# merge data
emp.dt<-merge(emp.data,emp.list,by="series_id",all.y=T)
#create month variable
emp.dt=emp.dt[,month:=as.numeric(substr(emp.dt$period,2,3))]
# (this assignment is to get around knitr/data table printing error)
# see e.g. http://stackoverflow.com/questions/15267018/knitr-gets-tricked-by-data-table-assignment
# M13 = Annual average, drop it:
emp.dt<-emp.dt[month<13,]
#create date variable
emp.dt$date<- as.Date(ISOdate(emp.dt$year,emp.dt$month,1) )
# merge on area and state codes
emp.dt<-merge(emp.dt,emp.area,by="area_code")
emp.dt<-merge(emp.dt,emp.st,by="state_code")
emp.dt=emp.dt[,c("state_name","area_name","date","year","month","value"),with=F]
emp.dt=emp.dt[,emp:=as.numeric(value)] #convert value to numeric
# Compute year-over-year change in employment and year-over-year percent change
emp.dt=emp.dt[,emp.yoy:=emp-shift(emp,12,fill=NA),by=c("area_name","state_name")]
emp.dt=emp.dt[,emp.pc:=(emp-shift(emp,12,fill=NA))/shift(emp,12,fill=NA),by=c("area_name","state_name")]
emp.dt=emp.dt[,max.emp.st:=max(emp),by=c("state_name")]
emp.dt=emp.dt[,type:=ifelse(area_name=="Statewide","State","Metro")]
# drop states in c("Puerto Rico","Virgin Islands")
emp.dt=emp.dt[!(state_name %in% c("Puerto Rico","Virgin Islands")),]
# only keep state data
emp.dt.state<-emp.dt[area_name=="Statewide"]
htmlTable::htmlTable(head(emp.dt.state))
names(df)
head(df)
df=df[,hpa:=(hpi-shift(hpi,12,fill=NA))/shift(hpi,12,fill=NA),by=c("statename")]
df
df
# Rename state_name as statename in emp.dt.state data
emp.dt.state<-rename(emp.dt.state,statename=state_name)
# merge on date & statename
dt<-merge(df,emp.dt.state,by=c("date","statename"))
dt
KnitPost(site.path="C:/Users/Leonard/Documents/webpage/live/lenkiefer.github.com/", overwriteAll=T, overwriteOne=NULL)
KnitPost(site.path="C:/Users/Leonard/Documents/webpage/live/lenkiefer.github.com/", overwriteAll=T, overwriteOne=NULL)
KnitPost(site.path="C:/Users/Leonard/Documents/webpage/live/lenkiefer.github.com/", overwriteAll=T, overwriteOne=NULL)
# plot house price trens for Ohio:
ggplot(data=dt[state=="OH"],aes(x=date,y=hpa))+geom_line()+theme_minimal()+
labs(x="",y="",title="12-month percent change in Ohio house prices",
caption="@lenkiefer Source: Freddie Mac House Price Index")+
theme(plot.caption=elemnet_text(hjust=0))
# plot house price trens for Ohio:
ggplot(data=dt[state=="OH"],aes(x=date,y=hpa))+geom_line()+theme_minimal()+
labs(x="",y="",title="12-month percent change in Ohio house prices",
caption="@lenkiefer Source: Freddie Mac House Price Index")+
theme(plot.caption=element_text(hjust=0))
KnitPost(site.path="C:/Users/Leonard/Documents/webpage/live/lenkiefer.github.com/", overwriteAll=T, overwriteOne=NULL)
# plot house price trens for Ohio:
ggplot(data=dt[state=="OH"],aes(x=date,y=hpa))+geom_line()+theme_minimal()+
labs(x="",y="",title="12-month percent change in Ohio house prices",
caption="@lenkiefer Source: Freddie Mac House Price Index")+
theme(plot.caption=element_text(hjust=0))+scale_y_continuous(labels=percent)
names(dt)
KnitPost(site.path="C:/Users/Leonard/Documents/webpage/live/lenkiefer.github.com/", overwriteAll=T, overwriteOne=NULL)
# plot house price trens for Ohio:
ggplot(data=dt[state=="AZ"],aes(x=date,y=hpa12))+geom_line()+theme_minimal()+
labs(x="",y="",title="12-month percent change in Arizona house prices",
caption="@lenkiefer Source: Freddie Mac House Price Index")+
theme(plot.caption=element_text(hjust=0))+scale_y_continuous(labels=percent)
# plot house price trens for Ohio:
ggplot(data=dt[state=="AZ"],aes(x=date,y=hpa12))+geom_area(fill="blude",alpha=0.25)+theme_minimal()+
labs(x="",y="",title="12-month percent change in Arizona house prices",
caption="@lenkiefer Source: Freddie Mac House Price Index")+
theme(plot.caption=element_text(hjust=0))+scale_y_continuous(labels=percent)
# plot house price trens for Ohio:
ggplot(data=dt[state=="AZ"],aes(x=date,y=hpa12))+geom_area(fill="blue",alpha=0.25)+theme_minimal()+
labs(x="",y="",title="12-month percent change in Arizona house prices",
caption="@lenkiefer Source: Freddie Mac House Price Index")+
theme(plot.caption=element_text(hjust=0))+scale_y_continuous(labels=percent)
# tweak data:
dt2<-copy(dt)
dt2<-dt2[,":="(hpa.up=max(0,hpa12),
hpa.down=min(0,hpa12))
,by=c("state","date")]
ggplot(data=dt2[state=="AZ"],aes(x=date))+
geom_area(aes(y=hpa.up),fill="blue",alpha=0.25)+
geom_area(aes(y=hpa.down),fill="red",alpha=0.25)+
theme_minimal()+
labs(x="",y="",title="12-month percent change in Arizona house prices",
caption="@lenkiefer Source: Freddie Mac House Price Index")+
theme(plot.caption=element_text(hjust=0))+scale_y_continuous(labels=percent)
# tweak data:
ggplot(data=dt[state=="AZ"],aes(x=date,y=hpa12,fill=hpa12))+
geom_col()+
theme_minimal()+
labs(x="",y="",title="12-month percent change in Arizona house prices",
caption="@lenkiefer Source: Freddie Mac House Price Index")+
theme(plot.caption=element_text(hjust=0))+scale_y_continuous(labels=percent)
# tweak data:
ggplot(data=dt[state=="AZ"],aes(x=date,y=hpa12,fill=hpa12))+
geom_col()+
scale_fill_grandient2(low="red",high="blue")+
theme_minimal()+
labs(x="",y="",title="12-month percent change in Arizona house prices",
caption="@lenkiefer Source: Freddie Mac House Price Index")+
theme(plot.caption=element_text(hjust=0))+scale_y_continuous(labels=percent)
# tweak data:
ggplot(data=dt[state=="AZ"],aes(x=date,y=hpa12,fill=hpa12))+
geom_col()+
scale_fill_gradient2(low="red",high="blue")+
theme_minimal()+
labs(x="",y="",title="12-month percent change in Arizona house prices",
caption="@lenkiefer Source: Freddie Mac House Price Index")+
theme(plot.caption=element_text(hjust=0))+scale_y_continuous(labels=percent)
# tweak data:
ggplot(data=dt[state=="AZ"],aes(x=date,y=hpa12,fill=hpa12))+
geom_col()+
scale_fill_gradient2(low="red",high="blue",name="12-month\n% change")+
theme_minimal()+
labs(x="",y="",title="12-month percent change in Arizona house prices",
caption="@lenkiefer Source: Freddie Mac House Price Index")+
theme(plot.caption=element_text(hjust=0))+scale_y_continuous(labels=percent)
df.ca<-dt2[state %in% c("AZ")]  #subset data
df.az<-df.az[,c("date","state","hpa12"),with=F]  #only keep relevant columns
df.az<-dt2[state %in% c("AZ")]  #subset data
df.az<-df.az[,c("date","state","hpa12"),with=F]  #only keep relevant columns
colnames(df) <- c("date","grouping","y")
df.az<-dt2[state %in% c("AZ")]  #subset data
df.az<-df.az[,c("date","state","hpa12"),with=F]  #only keep relevant columns
colnames(df.az) <- c("date","grouping","y")
origin<-0
# compute max deviation
max.y<-max(abs(df$y-origin))
nbands = 3
horizonscale<-max(abs(df$y-origin))/nbands
h1<-horizonscale
h2<-horizonscale*2
h3<-horizonscale*3
h1n<- -horizonscale
h2n<- -horizonscale*2
h3n<- -horizonscale*3
df.az <- df.az[ , ":="( ypos1  = ifelse(y>0,min(y,h1),0),
ypos2  = ifelse(y>h1,min(y,h2),0),
ypos3  = ifelse(y>h2,min(y,h3),0),
yneg1 = ifelse(y<0,max(y,h1n),0),
yneg2 = ifelse(y<h1n,max(y,h2n),0),
yneg3 = ifelse(y<h2n,max(y,h3n),0)) ,by=c("date","grouping")]
df.az<- df.az %>% select(-y) %>% gather(type, value, 3:8)
colnames(df.az) <- c("date","grouping","band","value")
df.lk<-data.frame(band=c("ypos1","ypos2","ypos3","yneg1","yneg2","yneg3"),
vmin=c(0,h1,h2,0,h1n,h2n))
df.az<-left_join(df.az,df.lk,by="band")
df.az$v2<-ifelse(abs(df.az$value)<abs(df.az$vmin),df.az$vmin,df.az$value)
ggplot(data=arrange(df,value)) +
geom_ribbon(aes(x = date,ymin=vmin, ymax = v2, fill=band,group=band),alpha=0.75)+
scale_fill_manual(values=c("ypos1"=col.brew[7],  #assign the colors to each of the bands; colors get darker as values increase
"ypos2"=col.brew[8],
"ypos3"=col.brew[9],
"yneg1"=col.brew[4],
"yneg2"=col.brew[3],
"yneg3"=col.brew[2]))+
labs(x="",y="",title="12-month percent change in Arizona house prices",
caption="@lenkiefer Source: Freddie Mac House Price Index")+
theme(plot.caption=element_text(hjust=0))+scale_y_continuous(labels=percent)
df.az<-dt2[state %in% c("AZ")]  #subset data
df.az<-df.az[,c("date","state","hpa12"),with=F]  #only keep relevant columns
colnames(df.az) <- c("date","grouping","y")
origin<-0
# compute max deviation
max.y<-max(abs(df$y-origin))
nbands = 3
horizonscale<-max(abs(df$y-origin))/nbands
h1<-horizonscale
h2<-horizonscale*2
h3<-horizonscale*3
h1n<- -horizonscale
h2n<- -horizonscale*2
h3n<- -horizonscale*3
df.az <- df.az[ , ":="( ypos1  = ifelse(y>0,min(y,h1),0),
ypos2  = ifelse(y>h1,min(y,h2),0),
ypos3  = ifelse(y>h2,min(y,h3),0),
yneg1 = ifelse(y<0,max(y,h1n),0),
yneg2 = ifelse(y<h1n,max(y,h2n),0),
yneg3 = ifelse(y<h2n,max(y,h3n),0)) ,by=c("date","grouping")]
df.az<- df.az %>% select(-y) %>% gather(type, value, 3:8)
df.az
colnames(df.az) <- c("date","grouping","band","value")
df.lk<-data.frame(band=c("ypos1","ypos2","ypos3","yneg1","yneg2","yneg3"),
vmin=c(0,h1,h2,0,h1n,h2n))
df.az<-left_join(df.az,df.lk,by="band")
df.az$v2<-ifelse(abs(df.az$value)<abs(df.az$vmin),df.az$vmin,df.az$value)
ggplot(data=arrange(df.az,value)) +
geom_ribbon(aes(x = date,ymin=vmin, ymax = v2, fill=band,group=band),alpha=0.75)+
scale_fill_manual(values=c("ypos1"=col.brew[7],  #assign the colors to each of the bands; colors get darker as values increase
"ypos2"=col.brew[8],
"ypos3"=col.brew[9],
"yneg1"=col.brew[4],
"yneg2"=col.brew[3],
"yneg3"=col.brew[2]))+
labs(x="",y="",title="12-month percent change in Arizona house prices",
caption="@lenkiefer Source: Freddie Mac House Price Index")+
theme(plot.caption=element_text(hjust=0))+scale_y_continuous(labels=percent)
df.az<-dt2[state %in% c("AZ")]  #subset data
df.az<-df.az[,c("date","state","hpa12"),with=F]  #only keep relevant columns
colnames(df.az) <- c("date","grouping","y")
origin<-0
# compute max deviation
max.y<-max(abs(df$y-origin))
nbands = 3
horizonscale<-max(abs(df$y-origin))/nbands
h1<-horizonscale
h2<-horizonscale*2
h3<-horizonscale*3
h1n<- -horizonscale
h2n<- -horizonscale*2
h3n<- -horizonscale*3
df.az <- df.az[ , ":="( ypos1  = ifelse(y>0,min(y,h1),0),
ypos2  = ifelse(y>h1,min(y,h2),0),
ypos3  = ifelse(y>h2,min(y,h3),0),
yneg1 = ifelse(y<0,max(y,h1n),0),
yneg2 = ifelse(y<h1n,max(y,h2n),0),
yneg3 = ifelse(y<h2n,max(y,h3n),0)) ,by=c("date","grouping")]
df.az<- df.az %>% select(-y) %>% gather(type, value, 3:8)
colnames(df.az) <- c("date","grouping","band","value")
df.lk<-data.frame(band=c("ypos1","ypos2","ypos3","yneg1","yneg2","yneg3"),
vmin=c(0,h1,h2,0,h1n,h2n))
df.az<-left_join(df.az,df.lk,by="band")
df.az$v2<-ifelse(abs(df.az$value)<abs(df.az$vmin),df.az$vmin,df.az$value)
require(RColorBrewer)
col.brew <- brewer.pal(name="RdBu",n=10)
ggplot(data=arrange(df.az,value)) +
geom_ribbon(aes(x = date,ymin=vmin, ymax = v2, fill=band,group=band),alpha=0.75)+
scale_fill_manual(values=c("ypos1"=col.brew[7],  #assign the colors to each of the bands; colors get darker as values increase
"ypos2"=col.brew[8],
"ypos3"=col.brew[9],
"yneg1"=col.brew[4],
"yneg2"=col.brew[3],
"yneg3"=col.brew[2]))+
labs(x="",y="",title="12-month percent change in Arizona house prices",
caption="@lenkiefer Source: Freddie Mac House Price Index")+
theme(plot.caption=element_text(hjust=0))+scale_y_continuous(labels=percent)
ggplot(data=arrange(df.az,value)) +
geom_ribbon(aes(x = date,ymin=vmin, ymax = v2, fill=band,group=band),alpha=0.75)+
scale_fill_manual(values=c("ypos1"=col.brew[7],  #assign the colors to each of the bands; colors get darker as values increase
"ypos2"=col.brew[8],
"ypos3"=col.brew[9],
"yneg1"=col.brew[4],
"yneg2"=col.brew[3],
"yneg3"=col.brew[2]))+
labs(x="",y="",title="12-month percent change in Arizona house prices",
caption="@lenkiefer Source: Freddie Mac House Price Index")+
theme(plot.caption=element_text(hjust=0))+scale_y_continuous(labels=percent)
df.az
ggplot(data=arrange(df.az,value)) +
geom_ribbon(aes(x = date,ymin=vmin, ymax = v2, fill=band,group=band),alpha=0.75)
dev.off()
dev.off()
scale_fill_manual(values=c("ypos1"=col.brew[7],  #assign the colors to each of the bands; colors get darker as values increase
"ypos2"=col.brew[8],
"ypos3"=col.brew[9],
"yneg1"=col.brew[4],
"yneg2"=col.brew[3],
"yneg3"=col.brew[2]))
